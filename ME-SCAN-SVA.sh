#!/bin/sh

####################################################################################################################################
# Author : Hongseok Ha, Jui Wan Loh, Jinchuan Xing
# Date : 25 Oct 2014
# Current version : 1.2
# Last update date : 3 April 2016 
# Update info : see Note file
# E-mail : hha@dls.rutgers.edu
# Purpose : Identification and analysis of SVA using ME-Scan data using BWA-BLAST pipeline.
####################################################################################################################################
# Requireements: BWA, Blast, LiftOver, Samtools, Bedtools, Primer3
#   
####################################################################################################################################
# Prepations:
# 1. target directory includes subdirectories (named as "Sample_...") containing Fastq files (pair_end)
# 2. file with .parameters extension should be located at target directory
#
####################################################################################################################################

#""
#The location of the codes: /lab01/Projects/MEScan/Analysis_SVA_Mar022015/juiwan
#files:

#README_for_instruction_to_generate_sensitivity_analysis - for the sequence of the codes to be used in generating data.
#README - describes what files and location generated by each code
#""

# Clean screen
clear

# Check if this is first execution or more
reexecute=$1
parameters_file=$2

# Software info
Software="ME-SCAN-SVA"
Software_ver="1.1"
Software_sub="BWA-BLAST"

# Preparation (Cheking parameters and path files) 

if [[ $(echo $(ls -l ME-Scan.path *parameters 2>/dev/null)|grep parameters|grep ME-Scan.path|wc -l) == 0 ]]; then
	echo -e "\e[0;31mThe parameters or ME-Scan.path file was missed in the working directory"
	echo -e "\e[0;0m "
	return
fi

if [[ $(echo $(ls -l Sample*/*fastq 2>/dev/null|wc -l)) == 0 ]]; then
	echo -e "\e[0;31mThe working directory should include subdirectories (named as \"Sample_...\") containing .fastq files (paired-end)"
	echo -e "\e[0;0m "
	return
fi

path_current=$(pwd)"/"


if [[ $reexecute != "reexecute" ]]; then

	if [[ $(ls -1 $path_current*.parameters 2>/dev/null|wc -l) == 1 ]]; then
	parameters_file=$(ls -1 $path_current*.parameters 2>/dev/null)


	elif [[ $(ls -l $path_current*.parameters 2>/dev/null|wc -l) != 1 ]]; then 

	eval "ls -1 "$path_current"*.parameters 2>/dev/null|awk 'BEGIN{i=1} {print i\".\\t\" \$1;i+=1}'"
	eval "ls -1 "$path_current"*.parameters 2>/dev/null|awk 'BEGIN{i=1} {print i\".\\t\" \$1;i+=1}'" > $path_current"choose_one_from_multiple_parameter_"$USER".temp"

	echo "Choose the number of target parameter "
	read no_parameter
	parameters_file=$(eval "awk '\$1=="$no_parameter" {print \$2}' "$path_current"choose_one_from_multiple_parameter_"$USER".temp")

	fi

	echo "You choosed "$parameters_file

	if [[ $(ls -l $parameters_file 2>/dev/null|wc -l) != 1 ]]; then
		echo -e "\e[0;31mIt's wrong parameters file name !"
		echo -e "\e[0;0m "
	return
	fi

fi

cores=$(nproc)
MEI=$(cat $parameters_file|awk -F "=" '$1=="MEI" {print $2}') 
MEI_ref_RM=$(cat $parameters_file|awk -F "=" '$1=="MEI_ref_RM" {print $2}')
MEI_known_stewart=$(cat $parameters_file|awk -F "=" '$1=="MEI_known_stewart" {print $2}')
MEI_known_dbrip=$(cat $parameters_file|awk -F "=" '$1=="MEI_known_dbrip" {print $2}')
MEI_known_1kproject=$(cat $parameters_file|awk -F "=" '$1=="MEI_known_1kproject" {print $2}')
window_size=$(cat $parameters_file|awk -F "=" '$1=="window_size" {print $2}')
mapq_bwa=$(cat $parameters_file|awk -F "=" '$1=="mapq_bwa" {print $2}')
blast_score_R1=$(cat $parameters_file|awk -F "=" '$1=="blast_score_R1" {print $2}')
blast_score_ref=$(cat $parameters_file|awk -F "=" '$1=="blast_score_ref" {print $2}')
primer_position=$(cat $parameters_file|awk -F "=" '$1=="primer_position" {print $2}')
ME_fragment=$(cat $parameters_file|awk -F "=" '$1=="ME_fragment" {print $2}')
repeatcover=$(cat $parameters_file|awk -F "=" '$1=="repeatcover" {print $2}')
clustering_type=$(cat $parameters_file|awk -F "=" '$1=="clustering_type" {print $2}')


for checker_parameters in MEI MEI_ref_RM MEI_known_stewart MEI_known_dbrip window_size mapq_bwa blast_score_R1 blast_score_ref primer_position ME_fragment repeatcover clustering_type MEI_known_1kproject; do checking_parameters="awk -F \"=\" '\$1==\""$checker_parameters"\"' "$parameters_file"|wc -l"; if [[ $(eval $checking_parameters) != "1" ]] ; then echo "The parameter file is incomplete, Please check it carefully"; fi; done

if [[ $reexecute != "reexecute" ]]; then
	echo ""
	echo "=============================================="
	echo "MEI="$MEI
	echo "MEI_ref_RM="$MEI_ref_RM
	echo "MEI_known_stewart="$MEI_known_stewart
	echo "MEI_known_dbrip="$MEI_known_dbrip
    echo "MEI_known_1kproject="$MEI_known_1kproject
	echo "window_size="$window_size
	echo "mapq_bwa="$mapq_bwa
	echo "blast_score_R1="$blast_score_R1
	echo "blast_score_ref="$blast_score_ref
	echo "primer_position="$primer_position
	echo "ME_fragment="$ME_fragment
	echo "repeatcover="$repeatcover
	echo "clustering_type="$clustering_type
	echo "=============================================="
	echo ""

	echo -e "\e[0;31m >> Press ENTER <<" 
	echo -e "\e[0;0m "
	read at_the_door

fi

clear

# path information file
file_path=$path_current"ME-Scan.path"
path_mescan=$(cat $file_path|awk -F "=" '$1=="path_mescan" {print $2}')
path_samtools=$(cat $file_path|awk -F "=" '$1=="path_samtools" {print $2}')
path_bwa=$(cat $file_path|awk -F "=" '$1=="path_bwa" {print $2}')
path_blast=$(cat $file_path|awk -F "=" '$1=="path_blast" {print $2}')
path_liftover=$(cat $file_path|awk -F "=" '$1=="path_liftover" {print $2}')
#path_primer3=$(cat $file_path|awk -F "=" '$1=="path_primer3" {print $2}')
#path_bedtools=$(cat $file_path|awk -F "=" '$1=="path_bedtools" {print $2}')
#path_primer_thermodynamic_parameters=$(cat $file_path|awk -F "=" '$1=="path_primer_thermodynamic_parameters" {print $2}')
path_sort_temporary_directory=$(cat $file_path|awk -F "=" '$1=="path_sort_temporary_directory" {print $2}')
path_python3=$(cat $file_path|awk -F "=" '$1=="path_python3" {print $2}')

## reference folder
path_modules=$path_mescan"modules/"
path_ref_mescan=$path_mescan"ref_mescan/"
path_ref_blast=$path_mescan"ref_blast/" # This directory should contain "ME_fragment"_primer.fasta for Blast and we suggest the sequences of primer to end 
path_ref_gencode=$path_mescan"ref_gencode/"
path_ref_encode=$path_mescan"ref_encode/"

## customized folders
option_tag="."$mapq_bwa"."$blast_score_R1"."$blast_score_ref"."$window_size".repeatcover_"$repeatcover"."$clustering_type"."
echo "current option_tag is "$option_tag
# customized reference
ref_mescan_customized="mkdir "$path_current"ref_mescan_customized"$option_tag"/ 2>/dev/null"
eval $ref_mescan_customized
path_ref_mescan_customized=$path_current"ref_mescan_customized"$option_tag"/" ## because of permission error

# Output directory
dir_output="mkdir "$path_current"output_bwa-blast"$option_tag"/ 2>/dev/null"
eval $dir_output
path_output=$path_current"output_bwa-blast"$option_tag"/"

# Figures, Tables, ready for publicationss
dir_results="mkdir "$path_current"Results"$option_tag"/ 2>/dev/null" 
eval $dir_results
path_Result=$path_current"Results"$option_tag"/"

# Show history of procedure 
echo ""
echo ""
echo -e "\e[0;33m============================== History of progressing ==============================="
cmd_history="cat "$path_current"history"$option_tag"log  2>/dev/null"
eval $cmd_history
echo "====================================================================================="
echo -e "\e[0;0m"

# Input major processing step
echo "Which step do you want to execute?"
echo "A. Pick up BLAST bit-score cutoffed reference MEI dataset"
echo "B. BWA-Blast mapping & identification (1-5)"
echo "C. Extract and liftover MEI from published dataset (dbRIP, stewart et al.2011)"
echo "D. Analysis & generate figures (1-13)"
echo "E. Primer design for genotyping"
echo "F. Cleanup"

read Major_step

# AAAAA     AAAAA AAAAA     AAAAA 
#   AAAAA AAAAA     AAAAA AAAAA   
#      AAAAA           AAAAA      
#   AAAAA AAAAA     AAAAA AAAAA   
# AAAAA     AAAAA AAAAA     AAAAA 
# AAAAA     AAAAA AAAAA     AAAAA 
#   AAAAA AAAAA     AAAAA AAAAA   
#      AAAAA           AAAAA      
#   AAAAA AAAAA     AAAAA AAAAA   
# AAAAA     AAAAA AAAAA     AAAAA  
# AAAAA     AAAAA AAAAA     AAAAA 
#   AAAAA AAAAA     AAAAA AAAAA   
#      AAAAA           AAAAA      
#   AAAAA AAAAA     AAAAA AAAAA   
# AAAAA     AAAAA AAAAA     AAAAA   

elif [[ $Major_step == "A" || $Major_step == "a" ]]; then

    # Record history
	date=$(date)
	echo $date" "$Software$Software_ver" "$Software_sub" Step-"$Major_step" was operated. "$MEI >> $path_current"history"$option_tag"log"
    
    rm_cutoff_reference_blast="rm "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed 2>/dev/null"
    rm_cutoff_reference_blast_RM="rm "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"RM.bed 2>/dev/null"   
    eval $rm_cutoff_reference_blast
    eval $rm_cutoff_reference_blast_RM

    cmd_build_ref_MEI="cat "$path_ref_mescan"Reference_"$MEI"_blastn-short.bed| awk '\$4>="$blast_score_ref" {print \$0}' > "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed"
    eval $cmd_build_ref_MEI

    cmd_extract_ref_MEI="intersectBed -a "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -b "$path_ref_mescan"hg19.fa.bed -wa -wb|grep -e \""$MEI_ref_RM"\" > "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"RM.bed"
    eval $cmd_extract_ref_MEI

  	while [ $(eval "ls "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
   	while [ $(eval "ls "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"RM.bed 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
 	
	echo -e "\e[0;0m the file named as \e[0;32m"$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed \e[0;0m has been generated"
 	echo -e "\e[0;0m the file named as \e[0;32m"$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"RM.bed \e[0;0m has been generated"
   
    echo "Step-A has been completed."

# BBBBB     BBBBB BBBBB     BBBBB 
#   BBBBB BBBBB     BBBBB BBBBB   
#      BBBBB           BBBBB      
#   BBBBB BBBBB     BBBBB BBBBB   
# BBBBB     BBBBB BBBBB     BBBBB 
# BBBBB     BBBBB BBBBB     BBBBB 
#   BBBBB BBBBB     BBBBB BBBBB   
#      BBBBB           BBBBB      
#   BBBBB BBBBB     BBBBB BBBBB   
# BBBBB     BBBBB BBBBB     BBBBB  
# BBBBB     BBBBB BBBBB     BBBBB 
#   BBBBB BBBBB     BBBBB BBBBB   
#      BBBBB           BBBBB      
#   BBBBB BBBBB     BBBBB BBBBB   
# BBBBB     BBBBB BBBBB     BBBBB

elif [[ $Major_step == "B" || $Major_step == "b" ]]; then

    # Working files
    file_ref=$path_ref_blast"human_g1k_v37.fasta"

    # Preparation 
    libraries=$(ls|grep Sample|awk -F _ '{ print $2 }')
    arr_lib=($libraries)
    set $libraries
    number_lib=$(echo $#)   
    echo $number_lib" libraries are detected..................................."

    # Choose process
    echo "Which job do you want to .. "
    echo "1. Mapped by BWA and filtered by Blast " 
    echo "2. Preparations for identification of insertion sites "
    echo "3. Report the number of filtered reads " 
    echo "4. Clustering the insertion sites "
    echo "5. Choose estimated points (reading end of representative reads) with depth and the number of read uniques "

    read input_BB

    # Record history
    date=$(date)
    echo $date" "$Software$Software_ver" "$Software_sub" Step-"$Major_step" "$input_BB" was operated. "$MEI >> $path_current"history"$option_tag"log"

    #>>>> Check_point_1 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    if [[ $input_BB == "1" ]]; then

  	echo -e "\e[0;31mThis step is not influnced by parameters except blast query sequence. You can skip this if this step was done before.\e[0;0m"
  	echo "Press 'Y' if you want to keep going."
  	read check_running
  	echo ""
  	if [[ $check_running == Y || $check_running == y ]];then echo "This step will be operated soon.." ; else return; fi

    rm_blast_filter="rm "$path_current"Sample_*/*_blast.filter 2>/dev/null"
    eval $rm_blast_filter

    # Make Blast database #  the input file name should be "MEI"_primer.fasta and we suggget that You use the sequence of fragment from primer to end (cut up to read length)
        cmd_make_blast_db=$path_blast"makeblastdb -in "$path_ref_blast$ME_fragment"_primer.fasta -dbtype nucl"
        eval $cmd_make_blast_db
        echo "Making a BLAST database has been completed" 

    # Map of Read2 to reference genome by BWA, and then filtered by Blast result of Read1 against MEI sequences
        echo -e "\e[0;31mCAUTION --> Step-1  must take long time. Please check BWA and BLASTN processing using TOP command."
        echo -e "\e[0;0m"       

        THREADS=$(echo $cores/5|bc)
        for i in $(seq $number_lib)
        do
        
        each_lib=${arr_lib[$i-1]}
        if [[ $each_lib != all ]] ; then
        read1=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R1|awk -F"." '{print $1}')
        read2=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R2|awk -F"." '{print $1}')
    
        echo $each_lib" of Step1......................................................."
        cmd_BWA_Blast_mapping="nice -10 python3 "$path_modules"BB_mapping.py --lib "$each_lib" --mei "$MEI" --r1 "$read1" --r2 "$read2" --mf "$ME_fragment
        eval $cmd_BWA_Blast_mapping&

        echo $i"/"$number_lib" in BB_mapping.py are running.. "

            sleep 10
           ###### checking_job1
            checker1=$(expr $i '%' $THREADS == 0)
            if [ $checker1 = 1 ]
            then
                echo -e "\e[0;31m After the currnt set of libaries will be completed, the processing for next sets will start.. \e[0;0m"            
                for job1 in $(jobs -p)
                do
                    wait $job1
                done
            fi
        fi
       	done
        echo "Mapping and filtering will be processed............................................."

        while [ $(eval "ls "$path_current"Sample_*/*_blast.filter 2>/dev/null|wc -l") -lt $number_lib ]; do     sleep 10;      done

        echo "Step-1 has been completed."

    #>>>> Check_point_2>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "2" ]]; then

	rm_mapping_plus="rm "$path_current"Sample_*/*.mapping_plus"$option_tag"temp 2>/dev/null"
	rm_mapping_minus="rm "$path_current"Sample_*/*.mapping_minus"$option_tag"temp 2>/dev/null"
	rm_repeatcover_stat="rm "$path_current"repeatcover_stat"$option_tag"csv 2>/dev/null"
	eval $rm_mapping_plus
	eval $rm_mapping_minus	
	eval $rm_repeatcover_stat

    # Prepare stuffs for next step
        THREADS=$(echo $cores/5|bc)
        for i in $(seq $number_lib)
        do
        
        each_lib=${arr_lib[$i-1]}
        read1=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R1|awk -F"." '{print $1}')
        read2=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R2|awk -F"." '{print $1}')

        # the out put format is not bed file format, chromosome read2_reading_start read2_reading_end
        cmd_mappedread2convert="nice -10 python3 "$path_modules"BB_mappedread2convert.py --lib "$each_lib" --mei "$MEI" --mapq "$mapq_bwa" --blast "$blast_score_R1" --r1 "$read1" --r2 "$read2" --option_tag "$option_tag" --repeatcover "$repeatcover
        eval $cmd_mappedread2convert&

        echo $i"/"$number_lib" in BB_mappedread2convert.py are running.. "

            sleep 10
            ###### checking_job2
            checker2=$(expr $i '%' $THREADS == 0)
            if [ $checker2 = 1 ]
            then
                echo -e "\e[0;31m After the currnt set of libaries will be completed, the processing for next sets will start.. \e[0;0m"            
                for job2 in $(jobs -p)
                do
                    wait $job2
                done
            fi
        done

        while [ $(eval "ls "$path_current"Sample_*/*.mapping_plus"$option_tag"temp 2>/dev/null|wc -l") -lt $number_lib ]; do     sleep 10;      done
        while [ $(eval "ls "$path_current"Sample_*/*.mapping_minus"$option_tag"temp 2>/dev/null|wc -l") -lt $number_lib ]; do     sleep 10;      done


	    echo "Individuals","100%_Repeat","Non100%_Repeat","Passed" > $path_current"repeatcover_stat"$option_tag"csv"
        # stat of 100% repeat covered read2
        for i in $(seq $number_lib)
        do
        
        each_lib=${arr_lib[$i-1]}
        read1=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R1|awk -F"." '{print $1}')
        read2=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R2|awk -F"." '{print $1}')

		cmd100="awk '\$10==1' "$read2$option_tag"repeatcover.temp|wc -l"
		cmdnon100="awk '\$10!=1' "$read2$option_tag"repeatcover.temp|wc -l"
		echo $each_lib,$(eval $cmd100),$(eval $cmdnon100),$(echo $(eval $cmd100)/\($(eval $cmd100)+$(eval $cmdnon100)\)|bc -l) >> $path_current"repeatcover_stat"$option_tag"csv"

        echo $each_lib" is processing ......................................................."
        done

        while [ $(eval "ls "$path_current"repeatcover_stat"$option_tag"csv 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

	# pooling

    rm_pre_pool_plus="rm "$path_output$MEI"_all.mapping_plus"$option_tag"pre_temp 2>/dev/null"
    rm_pre_pool_minus="rm "$path_output$MEI"_all.mapping_minus"$option_tag"pre_temp 2>/dev/null"
    rm_pool_plus="rm "path_output$MEI"_all.mapping_plus"$option_tag"temp 2>/dev/null"
    rm_pool_minus="rm "$path_output$MEI"_all.mapping_minus"$option_tag"temp 2>/dev/null"

    eval $rm_pre_pool_plus
    eval $rm_pre_pool_minus
    eval $rm_pool_plus
    eval $rm_pool_minus  

        for i in $(seq $number_lib)

        do

        each_lib=${arr_lib[$i-1]}
        read1=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R1|awk -F"." '{print $1}')
        read2=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R2|awk -F"." '{print $1}')

		cmd_pool_pre_plus="cat "$read2".target.filtered"$option_tag"temp|awk '\$6==\"+\"{print \$1\"\\t\"\$2\"\\t\"\$3}'|sed 's/chrX/23/g'|sed 's/chrY/24/g'|sed 's/^chr//g'|sort -T "$path_sort_temporary_directory" -k1n -k3n|uniq -c|awk '{print \"chr\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$1\"\\t"$each_lib"\"}'|sed 's/chr23/chrX/g'|sed 's/chr24/chrY/g' >> "$path_output$MEI"_all.mapping_plus"$option_tag"pre_temp"
        cmd_pool_pre_minus="cat "$read2".target.filtered"$option_tag"temp|awk '\$6==\"-\"{print \$1\"\\t\"\$2\"\\t\"\$3}'|sed 's/chrX/23/g'|sed 's/chrY/24/g'|sed 's/^chr//g'|sort -T "$path_sort_temporary_directory" -k1n -k3n|uniq -c|awk '{print \"chr\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$1\"\\t"$each_lib"\"}'|sed 's/chr23/chrX/g'|sed 's/chr24/chrY/g' >> "$path_output$MEI"_all.mapping_minus"$option_tag"pre_temp"

        eval $cmd_pool_pre_plus
        eval $cmd_pool_pre_minus

        done

        while [ $(eval "ls "$path_output$MEI"_all.mapping_plus"$option_tag"pre_temp 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
        while [ $(eval "ls "$path_output$MEI"_all.mapping_minus"$option_tag"pre_temp 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

        cmd_pool_plus="cat "$path_output$MEI"_all.mapping_plus"$option_tag"pre_temp|sed 's/chrX/23/g'|sed 's/chrY/24/g'|sed 's/^chr//g'|sort -T "$path_sort_temporary_directory" -k1n -k3n|awk '{print \"chr\"\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5}'|sed 's/chr23/chrX/g'|sed 's/chr24/chrY/g' >"$path_output$MEI"_all.mapping_plus"$option_tag"temp"
        cmd_pool_minus="cat "$path_output$MEI"_all.mapping_minus"$option_tag"pre_temp|sed 's/chrX/23/g'|sed 's/chrY/24/g'|sed 's/^chr//g'|sort -T "$path_sort_temporary_directory" -k1n -k3n|awk '{print \"chr\"\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5}'|sed 's/chr23/chrX/g'|sed 's/chr24/chrY/g' >"$path_output$MEI"_all.mapping_minus"$option_tag"temp"

        eval $cmd_pool_plus
        eval $cmd_pool_minus

        while [ $(eval "ls "$path_output$MEI"_all.mapping_plus"$option_tag"temp 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
        while [ $(eval "ls "$path_output$MEI"_all.mapping_minus"$option_tag"temp 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

		cmd_pool_minus_initial="cat "$path_output$MEI"_all.mapping_minus"$option_tag"temp|sed -n 1,1p > "$path_output$MEI"_all.initial_minus"$option_tag"temp"
		cmd_pool_plus_initial="cat "$path_output$MEI"_all.mapping_plus"$option_tag"temp|sed -n 1,1p > "$path_output$MEI"_all.initial_plus"$option_tag"temp"

		eval $cmd_pool_minus_initial
		eval $cmd_pool_plus_initial	

        while [ $(eval "ls "$path_output$MEI"_all.mapping_minus"$option_tag"temp 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
        while [ $(eval "ls "$path_output$MEI"_all.mapping_plus"$option_tag"temp 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

        echo "Step-2 has been completed."

 #>>>> Check_point_3 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "3" ]]; then
		rm_filtering_report="rm "$path_current"Filtering_report."$MEI$option_tag"csv 2>/dev/null"
		eval $rm_filtering_report

        echo "# Read2_BWA_mapping_quality >="$mapq_bwa > $path_current"Filtering_report."$MEI$option_tag"csv"
        echo "# Read2_remove_mapping_unplaced.." >> $path_current"Filtering_report."$MEI$option_tag"csv"
        echo "# Read1_BLAST_bit-score >="$blast_score_R1 >> $path_current"Filtering_report."$MEI$option_tag"csv"
        echo "Individual_ID,P-P,P-P(%),P-F,P-F(%),F-P,F-P(%),F-F,F-F(%)" >> $path_current"Filtering_report."$MEI$option_tag"csv"

        for i in $(seq $number_lib)
        do
        
	        each_lib=${arr_lib[$i-1]}

	        if [[ $each_lib != all ]] ; then
		        read1=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R1|awk -F"." '{print $1}')
		        read2=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R2|awk -F"." '{print $1}')
		 
		        cmd_Raw_read="wc -l "$read2".fastq|awk '{print \$1/4}'"
		        cmd_Both_filtered="wc -l "$read2".target.filtered"$option_tag"temp|awk '{print \$1}'"
		        cmd_Read2_filterd="wc -l "$read2".rm_unplaced"$option_tag"temp|awk '{print \$1}'"
		        cmd_Read1_filterd="awk '\$12>= "$blast_score_R1"' "$read1"_"$MEI"_blast.filter|wc -l"

		        #Read1-Read2 (Pass or Fail)   
		        PP=$(eval $cmd_Both_filtered)
		        PF=$(echo $(eval $cmd_Read1_filterd)-$(eval $cmd_Both_filtered)|bc)
		        FP=$(echo $(eval $cmd_Read2_filterd)-$(eval $cmd_Both_filtered)|bc)
		        FF=$(echo $(eval $cmd_Raw_read)"-"$PP"-"$PF"-"$FP|bc)

		        echo $each_lib","$PP","$(echo $PP*100/$(eval $cmd_Raw_read)|bc -l)"%,"$PF ","$(echo $PF*100/$(eval $cmd_Raw_read)|bc -l)"%,"$FP","$(echo $FP*100/$(eval $cmd_Raw_read)|bc -l)"%,"$FF ","$(echo $FF*100/$(eval $cmd_Raw_read)|bc -l)"%" >> $path_current"Filtering_report."$MEI$option_tag"csv"
		        echo $i"/"$number_lib" are done..  "
	        fi

    	done

    	while [ $(eval "ls "$path_current"Filtering_report."$MEI$option_tag"csv 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
		echo -e "\e[0;0m the file named as \e[0;32m"$path_current"Filtering_report."$MEI$option_tag"csv \e[0;0m has been generated"
        echo "Step-3 has been completed."

   #>>>> Check_point_4>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "4"  ]]; then

		rm_insert="rm "$path_current"Sample_*/*.insert"$option_tag"temp 2>/dev/null"
		eval $rm_insert

#    	echo "Input the number of 1. Fixed or 2. Flexible loci clustering."
#    	read clustering_type

		if [[ $clustering_type == "fixed" ]]; then
    	# Fixed clustering  
	        THREADS=$(echo $cores/5|bc)
	        for i in $(seq $number_lib)
	        do
	        
	        each_lib=${arr_lib[$i-1]}
	        read1=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R1|awk -F"." '{print $1}')
	        read2=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R2|awk -F"." '{print $1}')

	        # the output format is not bed file format, chromosome read2_reading_start read2_reading_end
	        cmd_insert="nice -10 python3 "$path_modules"BB_insert.py --lib "$each_lib" --mei "$MEI" --option_tag "$option_tag" --r1 "$read1" --r2 "$read2" --mfl "$window_size"  > "$read2".insert"$option_tag"temp"
	        eval $cmd_insert&

	            sleep 10
	            ###### checking_job4
	            checker4_1=$(expr $i '%' $THREADS == 0)
	            if [ $checker4_1 = 1 ]
	            then
	                for job4_1 in $(jobs -p)
	                do
	                    wait $job4_1
	                done
	            fi

	        done

	        # pooing clustering
            cmd_all_insert=$path_python3"python3 "$path_modules"BB_all_insert.py --mei "$MEI" --mfl "$window_size" --option_tag "$option_tag" --path_output "$path_output" > "$path_output$MEI"_all.insert"$option_tag"temp"
            eval $cmd_all_insert

		elif [[ $clustering_type == "flexible" ]]; then
	    # Flexible clustering  

	        THREADS=$(echo $cores/5|bc)
	        for i in $(seq $number_lib)
		        do
		        
		        each_lib=${arr_lib[$i-1]}
		        read1=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R1|awk -F"." '{print $1}')
		        read2=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R2|awk -F"." '{print $1}')

		        # the output format is not bed file format, chromosome read2_reading_start read2_reading_end
		        cmd_insert="nice -10 python3 "$path_modules"BB_insert_flexible.py --lib "$each_lib" --mei "$MEI" --option_tag "$option_tag" --r1 "$read1" --r2 "$read2" --mfl "$window_size"  > "$read2".insert"$option_tag"temp"
		        eval $cmd_insert&

		            sleep 10
		            ###### checking_job4_1
		            checker4_2=$(expr $i '%' $THREADS == 0)
		            if [ $checker4_2 = 1 ]
		            then
		                for job4_2 in $(jobs -p)
		                do
		                    wait $job4_2
		                done
		            fi

	        	done

        	# pooing clustering
        	cmd_all_insert=$path_python3"python3 "$path_modules"BB_all_insert_flexible.py --mei "$MEI" --mfl "$window_size" --option_tag "$option_tag" --path_output "$path_output" > "$path_output$MEI"_all.insert"$option_tag"temp"
            eval $cmd_all_insert
        fi

        while [ $(eval "ls "$path_current"Sample_*/*.insert"$option_tag"temp|grep -v \"tab.insert"$option_tag"temp\" 2>/dev/null|wc -l") -lt $number_lib ]; do     sleep 10;      done
        while [ $(eval "ls "$path_output$MEI"_all.insert"$option_tag"temp|grep -v \"tab.insert"$option_tag"temp\" 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    	rm_insert_plus="rm "$path_current"Sample_*/*.insert_plus"$option_tag"temp 2>/dev/null"
		rm_insert_minus="rm "$path_current"Sample_*/*.insert_minus"$option_tag"temp 2>/dev/null"
		eval $rm_insert_plus
		eval $rm_insert_minus

		# separate by direction
        THREADS=$(echo $cores/5|bc)
        for i in $(seq $number_lib)
	        do
	        
	        each_lib=${arr_lib[$i-1]}
	        read1=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R1|awk -F"." '{print $1}')
	        read2=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R2|awk -F"." '{print $1}')

			cmd_insert_plus="cat "$read2".insert"$option_tag"temp|grep plus > "$read2".insert_plus"$option_tag"temp"
			cmd_insert_minus="cat "$read2".insert"$option_tag"temp|grep minus > "$read2".insert_minus"$option_tag"temp"

			eval $cmd_insert_plus&
			eval $cmd_insert_minus&

	            ###### checking_job4_2
	            checker4_3=$(expr $i '%' $THREADS == 0)
	            if [ $checker4_3 = 1 ]
	            then
	                for job4_3 in $(jobs -p)
	                do
	                    wait $job4_3
	                done
	            fi

	        done

		while [ $(eval "ls "$path_current"Sample_*/*.insert_plus"$option_tag"temp 2>/dev/null|wc -l") -lt $number_lib ]; do     sleep 10;      done
		while [ $(eval "ls "$path_current"Sample_*/*.insert_minus"$option_tag"temp 2>/dev/null|wc -l") -lt $number_lib ]; do     sleep 10;      done

		# separate pooled sampele by direction		
        cmd_all_insert_plus="cat "$path_output$MEI"_all.insert"$option_tag"temp|grep plus > "$path_output$MEI"_all.insert_plus"$option_tag"temp"
        cmd_all_insert_minus="cat "$path_output$MEI"_all.insert"$option_tag"temp|grep minus > "$path_output$MEI"_all.insert_minus"$option_tag"temp"

        eval $cmd_all_insert_plus
        eval $cmd_all_insert_minus 

		while [ $(eval "ls "$path_output$MEI"_all.insert_plus"$option_tag"temp 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
		while [ $(eval "ls "$path_output$MEI"_all.insert_minus"$option_tag"temp 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

        echo "Step-4 has been completed."
  
    #>>>> Check_point_5 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "5" ]]; then
 
        # Select representative read within a locus cluster (nearest MEI)  
        ## for plus  ## reading end point of the far right read within a locus cluster
        ## for minus  ## reading end point of the far left read within a locus cluster

        THREADS=$(echo $cores/5|bc)
        for i in $(seq $number_lib)
	        do	        
	        each_lib=${arr_lib[$i-1]}
	        read1=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R1|awk -F"." '{print $1}')
	        read2=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R2|awk -F"." '{print $1}')

	        rm_insert_representative_plus="rm "$read2".insert_representative_plus"$option_tag"temp 2>/dev/null"
	        rm_insert_representative_minus="rm "$read2".insert_representative_minus"$option_tag"temp 2>/dev/null"
	        eval $rm_insert_representative_plus
	        eval $rm_insert_representative_minus

	        cmd_insert_representative_plus_with_depth_and_unique="nice -10 awk '{array[\$5]=\$1\"\\t\"\$2\"\\t\"\$3;depth[\$5]+=\$4;no_var[\$5]+=1} END {for (i in array) {print array[i]\"\\t\"depth[i]\"\\t\"no_var[i]\"\\t\"i}}'  "$read2".insert_plus"$option_tag"temp > "$read2".insert_representative_plus"$option_tag"temp"
			cmd_insert_representative_minus_with_depth_and_unique="nice -10 awk '{depth[\$5]+=\$4;no_var[\$5]+=1;if (\$5!=mtag)array[\$5]=\$1\"\\t\"\$2\"\\t\"\$3;mtag=\$5} END {for (i in array){print array[i]\"\\t\"depth[i]\"\\t\"no_var[i]\"\\t\"i}}'  "$read2".insert_minus"$option_tag"temp > "$read2".insert_representative_minus"$option_tag"temp"

	        eval $cmd_insert_representative_plus_with_depth_and_unique&
	        eval $cmd_insert_representative_minus_with_depth_and_unique&

	            sleep 10
	            ###### checking_job5_1
	            checker5_1=$(expr $i '%' $THREADS == 0)
	            if [ $checker5_1 = 1 ]
	            then
	                for job5_1 in $(jobs -p)
	                do
	                    wait $job5_1
	                done
	            fi
	        done

        while [ $(eval "ls "$path_current"Sample_*/*.insert_representative_plus"$option_tag"temp 2>/dev/null|wc -l") -lt $number_lib ]; do     sleep 10;      done
        while [ $(eval "ls "$path_current"Sample_*/*.insert_representative_minus"$option_tag"temp 2>/dev/null|wc -l") -lt $number_lib ]; do     sleep 10;      done

        # Select representative read within a locus cluster (nearest MEI)   in pooled samples

        ## for plus  ## reading end point of the far right read within a locus cluster
        ## for minus  ## reading end point of the far left read within a locus cluster

        read1=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R1|awk -F"." '{print $1}')
        read2=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R2|awk -F"." '{print $1}')
        
        cmd_insert_representative_plus_with_depth_and_unique_all="nice -10 awk '{array[\$6]=\$1\"\\t\"\$2\"\\t\"\$3;depth[\$6]+=\$4;no_var[\$6]+=1;if(individuals[\$6]!~\$5) individuals[\$6] = individuals[\$6]\",\"\$5 } END {for (i in array) {print array[i]\"\\t\"depth[i]\"\\t\"no_var[i]\"\\t\"individuals[i]\"\\t\"i}}'  "$path_output$MEI"_all.insert_plus"$option_tag"temp |sed 's/chrX/23/g'|sed 's/chrY/24/g'|sed 's/^chr//g'|sort -T "$path_sort_temporary_directory" -k1n -k3n|awk '{print \"chr\"\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7}'|sed 's/chr23/chrX/g'|sed 's/chr24/chrY/g' > "$path_output$MEI"_all.insert_representative_plus"$option_tag"temp"
		cmd_insert_representative_minus_with_depth_and_unique_all="nice -10 awk '{depth[\$6]+=\$4;no_var[\$6]+=1;if (\$6!=mtag) array[\$6]=\$1\"\\t\"\$2\"\\t\"\$3 ;mtag=\$6;if(individuals[\$6]!~\$5) individuals[\$6] = individuals[\$6]\",\"\$5 } END {for (i in array){print array[i]\"\\t\"depth[i]\"\\t\"no_var[i]\"\\t\"individuals[i]\"\\t\"i}}'  "$path_output$MEI"_all.insert_minus"$option_tag"temp|sed 's/chrX/23/g'|sed 's/chrY/24/g'|sed 's/^chr//g'|sort -T "$path_sort_temporary_directory" -k1n -k3n|awk '{print \"chr\"\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7}'|sed 's/chr23/chrX/g'|sed 's/chr24/chrY/g' > "$path_output$MEI"_all.insert_representative_minus"$option_tag"temp"

        eval $cmd_insert_representative_plus_with_depth_and_unique_all&
        eval $cmd_insert_representative_minus_with_depth_and_unique_all&

        while [ $(eval "ls "$path_output$MEI"_all.insert_representative_plus"$option_tag"temp 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
        while [ $(eval "ls "$path_output$MEI"_all.insert_representative_minus"$option_tag"temp 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

        THREADS=$(echo $cores/5|bc)
        for i in $(seq $number_lib)
	        do
	        
	        each_lib=${arr_lib[$i-1]}
	        read1=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R1|awk -F"." '{print $1}')
	        read2=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R2|awk -F"." '{print $1}')
	        
	        rm_BB_bed="rm "$path_output$MEI"_"$each_lib$option_tag"BB.bed 2>/dev/null"
	        eval $rm_BB_bed

			cmd_BB_bed="cat "$read2".insert_representative_plus"$option_tag"temp "$read2".insert_representative_minus"$option_tag"temp |sed 's/chrX/23/g'|sed 's/chrY/24/g'|sed 's/^chr//g'|sort -T "$path_sort_temporary_directory" -k1n -k3n|awk '\$6~\"plus\"{print \"chr\"\$1\"\\t\"\$3\"\\t\"\$3+10\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6} \$6~\"minus\"{print \"chr\"\$1\"\\t\"\$3-10\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6}'|sed 's/chr23/chrX/g'|sed 's/chr24/chrY/g'|awk '\$5>=2' > "$path_output$MEI"_"$each_lib$option_tag"BB.bed"
			eval $cmd_BB_bed&

	            sleep 10
	            ###### checking_job5_2
	            checker5_2=$(expr $i '%' $THREADS == 0)
	            if [ $checker5_2 = 1 ]
	            then
	                for job5_2 in $(jobs -p)
	                do
	                    wait $job5_2
	                done
	            fi
	        done

		cmd_BB_bed_all="cat "$path_output$MEI"_all.insert_representative_plus"$option_tag"temp "$path_output$MEI"_all.insert_representative_minus"$option_tag"temp|sed 's/chrX/23/g'|sed 's/chrY/24/g'|sed 's/^chr//g'|sort -T "$path_sort_temporary_directory" -k1n -k3n|awk '\$7~\"plus\"{print \"chr\"\$1\"\\t\"\$3\"\\t\"\$3+10\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7} \$7~\"minus\"{print \"chr\"\$1\"\\t\"\$3-10\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7} '|sed 's/chr23/chrX/g'|sed 's/chr24/chrY/g' |sed -r 's/\t,/\t/g' |awk '\$5>=2' > "$path_output$MEI"_all"$option_tag"BB.bed"
		eval $cmd_BB_bed_all

        while [ $(eval "ls "$path_output$MEI"_*"$option_tag"BB.bed 2>/dev/null|grep -v "$path_output$MEI"_all"$option_tag"BB.bed|wc -l") -lt $number_lib ]; do     sleep 10;      done
        while [ $(eval "ls "$path_output$MEI"_all"$option_tag"BB.bed 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

        echo -e "\e[0;0m the file named as \e[0;32m"$path_output$MEI"_\e[0;33m[Individual_ID]\e[0;32m"$option_tag"BB.bed""\e[0;0m has been generated"
        echo -e "\e[0;0m the file named as \e[0;32m"$path_output$MEI"_all"$option_tag"BB.bed \e[0;0m has been generated"   
        echo "Step-5 has been completed."   

    fi
   

# CCCCC     CCCCC CCCCC     CCCCC 
#   CCCCC CCCCC     CCCCC CCCCC   
#      CCCCC           CCCCC      
#   CCCCC CCCCC     CCCCC CCCCC   
# CCCCC     CCCCC CCCCC     CCCCC 
# CCCCC     CCCCC CCCCC     CCCCC 
#   CCCCC CCCCC     CCCCC CCCCC   
#      CCCCC           CCCCC      
#   CCCCC CCCCC     CCCCC CCCCC   
# CCCCC     CCCCC CCCCC     CCCCC  
# CCCCC     CCCCC CCCCC     CCCCC 
#   CCCCC CCCCC     CCCCC CCCCC   
#      CCCCC           CCCCC      
#   CCCCC CCCCC     CCCCC CCCCC   
# CCCCC     CCCCC CCCCC     CCCCC 

elif [[ $Major_step == "C" || $Major_step == "c" ]]; then

    rm_1="rm "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.del.bed 2>/dev/null"
    rm_2="rm "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".del.bed 2>/dev/null"
    rm_3="rm "$path_ref_mescan_customized$path_ref_mescan_customized$MEI"_extract_dbRIP.bed 2>/dev/null"
    rm_4="rm "$path_ref_mescan_customized"Fixed_Reference."$MEI$option_tag"bed 2>/dev/null"
    rm_5="rm "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.indvidual_ins.bed 2>/dev/null"
    rm_6="rm "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed 2>/dev/null"
    rm_7="rm "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".individual_ins.bed 2>/dev/null"
    rm_8="rm "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed 2>/dev/null"
    eval $rm_1;eval $rm_2;eval $rm_3;eval $rm_4; eval $rm_5;eval $rm_6;eval $rm_7;eval $rm_8


    # Record history
	date=$(date)
	echo $date" "$Software$Software_ver" "$Software_sub" Step-"$Major_step" was operated. "$MEI >> $path_current"history"$option_tag"log"

	# Preparation 
    libraries=$(ls|grep Sample| awk -F _ '{ print $2 }')
    arr_lib=($libraries)
    set $libraries
    number_lib=$(echo $#)   
    echo $number_lib" libraries are detected..................................."

    # make new customized stewart et al. 2011 dataset
    rm_MEI_known_stewart="rm "$path_ref_mescan_customized"*_journal.pgen.1002236.s019.*.bed* 2>/dev/null"
    eval $rm_MEI_known_stewart


###########################################>> DELETION polymorphism for Fixed MEI loci

    echo "-----> DELETION polymorphism for Fixed MEI loci"

    # make deletion dataset from stewart et al. 2011 dataset for fixed loci
    echo "-> making ME deletion dataset from stewart et al. 2011 dataset for Fixed MEI loci"

	cmd_make_bed_del="cat "$path_ref_mescan"journal.pgen.1002236.s019.txt|grep -e \""$MEI_known_stewart"\"|awk '\$8 == \"DEL\"{print \"chr\"\$1\"\t\"\$2\"\t\"\$2+1}'|sort  -T "$path_sort_temporary_directory"|uniq -c|awk '{print \$2\"\t\"\$3\"\t\"\$4\"\t\"\$1}' >> "$path_ref_mescan_customized$MEI"_journal.pgen.1002236.s019.del.bed" ## liftOver can't recognize
	eval $cmd_make_bed_del

    cmd_liftover_del=$path_liftover"liftOver "$path_ref_mescan_customized$MEI"_journal.pgen.1002236.s019.del.bed "$path_liftover"chain_files/hg18ToHg19.over.chain "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.del.bed "$path_ref_mescan_customized"unlifted_"$MEI"_journal.pgen.1002236.s019.del.bed"
    eval $cmd_liftover_del

    echo "-> making ME deletion dataset from 1000 genome structure database for Fixed MEI loci"
    # make deletion dataset from 1000 genome project
    cmd_1kproject_del="awk '{print \"chr\"\$1\"\\t\"\$2\"\\t\"\$8}' "$path_ref_mescan"ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes.vcf|awk -F\"\t|;\" '\$3~\"SVTYPE=DEL\" && \$4~\""$MEI_known_1kproject"\" {print \$1\"\\t\"\$2\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4}' > "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".del.bed"
    eval $cmd_1kproject_del

    echo "-> making ME indel dataset from dbRIP for Fixed or Novel MEI loci"

    # filtered by dbRIP
    cmd_dbRIP_bed="cat "$path_ref_mescan"dbrip_"$MEI_known_dbrip"_hg19_v2h.txt|grep -e \""$MEI_known_dbrip"\"|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$4-\$3}' >"$path_ref_mescan_customized$MEI"_extract_dbRIP.bed"
    eval $cmd_dbRIP_bed

    # created fixed MEI loci
    cmd_fixed_MEI_loci="windowBed -a "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"RM.bed -b "$path_ref_mescan_customized$MEI"_extract_dbRIP.bed -w "$window_size" -v |windowBed -a  stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.del.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".del.bed  -w "$window_size" -v > "$path_ref_mescan_customized"Fixed_Reference."$MEI$option_tag"bed"
    eval $cmd_fixed_MEI_loci 

###########################################>> INSERTION polymorphism for Novel MEI candidates

    echo "-----> INSERTION polymorphism for Novel insertion candidates"
    echo "-> making MEI dataset from stewart et al. 2011 dataset for novel insertion sites"
    THREADS=$(echo $cores/2|bc)
    for i in $(seq $number_lib)
        do
        j=i-1
        each_lib=${arr_lib[$j]}
        
        check_indv=$(eval "cat "$path_ref_mescan"journal.pgen.1002236.s019.txt|grep "$each_lib"|wc -l")
        if [ $check_indv -lt 1 ]
        then
            echo $each_lib" is not found in stewart et al. 2011 dataset"
        else
            cmd_make_bed_indv_ins="cat "$path_ref_mescan"journal.pgen.1002236.s019.txt|grep -e \""$MEI_known_stewart"\"|grep "$each_lib"|awk '\$8 == \"INS\" {print \"chr\"\$1\"\t\"\$2\"\t\"\$2+1}'|sort  -T "$path_sort_temporary_directory"|uniq -c|awk '{print \$2\"\t\"\$3\"\t\"\$4\"\t\"\$1\"\t"$each_lib"\"}' >> "$path_ref_mescan_customized$MEI"_journal.pgen.1002236.s019.indvidual_ins.bed" ## liftOver can't recognize
            eval $cmd_make_bed_indv_ins

        fi
        done

    cmd_liftover_indv_ins=$path_liftover"liftOver "$path_ref_mescan_customized$MEI"_journal.pgen.1002236.s019.indvidual_ins.bed "$path_liftover"chain_files/hg18ToHg19.over.chain "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.indvidual_ins.bed "$path_ref_mescan_customized"unlifted_"$MEI"_journal.pgen.1002236.s019.indvidual_ins.bed "
    eval $cmd_liftover_indv_ins


    cmd_make_bed_entire_ins="cat "$path_ref_mescan"journal.pgen.1002236.s019.txt|grep -e \""$MEI_known_stewart"\"|awk '\$8 == \"INS\" {print \"chr\"\$1\"\t\"\$2\"\t\"\$2+1}'|sort  -T "$path_sort_temporary_directory"|uniq -c|awk '{print \$2\"\t\"\$3\"\t\"\$4\"\t\"\$1}' >> "$path_ref_mescan_customized$MEI"_journal.pgen.1002236.s019.entire_ins.bed" ## liftOver can't recognize
    eval $cmd_make_bed_entire_ins

    cmd_liftover_entire_ins=$path_liftover"liftOver "$path_ref_mescan_customized$MEI"_journal.pgen.1002236.s019.entire_ins.bed "$path_liftover"chain_files/hg18ToHg19.over.chain "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed "$path_ref_mescan_customized"unlifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed "
    eval $cmd_liftover_entire_ins

    echo "-> making MEI dataset from 1000 genome structure database for novel insertion sites"
    THREADS=$(echo $cores/2|bc)
    for i in $(seq $number_lib)
        do
        j=i-1
        each_lib=${arr_lib[$j]}
        cmd_indv_number=$(eval "awk '\$2==\""$each_lib"\"{print \$1}' "$path_ref_mescan"ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes.individuals.list")

        if [ -z $cmd_indv_number ]
            then
            echo $each_lib" is not found in 1000 genome structure database"
        else
            column_number=$(echo $cmd_indv_number+9|bc)
            cmd_1kproject_indv_ins="cat "$path_ref_mescan"ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes.vcf|grep \"<INS:ME\"|grep \""$MEI_known_1kproject"\"|awk ' \$"$column_number"~1{print \"chr\"\$1\"\t\"\$2\"\t\"\$"$column_number"\"\t\"\$8}'|awk -F\"\t|;\" '{print \$1\"\t\"\$2\"\t\"\$2\"\t\"\$5\"\t\"\$6\"\t"$each_lib"\t\"\$3}'>>"$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".individual_ins.bed"
            eval $cmd_1kproject_indv_ins
        fi

        done

    cmd_1kproject_entire_ins="cat "$path_ref_mescan"ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes.vcf|grep \"<INS:ME\"|grep \""$MEI_known_1kproject"\"|awk '{print \"chr\"\$1\"\t\"\$2\"\t\"\$8}'|awk -F\"\t|;\" '{print \$1\"\t\"\$2\"\t\"\$2\"\t\"\$4\"\t\"\$5}'>>"$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed"
    eval $cmd_1kproject_entire_ins

	while [ $(eval "ls "$path_ref_mescan_customized"Fixed_Reference."$MEI$option_tag"bed 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
 
    echo -e "\e[0;0m the file named as \e[0;32m"$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.del.bed \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".del.bed \e[0;0m has been generated"
    echo ""
    echo -e "\e[0;0m the file named as \e[0;32m"$path_ref_mescan_customized$MEI"_extract_dbRIP.bed \e[0;0m has been generated"
    echo ""
    echo -e "\e[0;0m the file named as \e[0;32m"$path_ref_mescan_customized"Fixed_Reference."$MEI$option_tag"bed \e[0;0m has been generated"
    echo ""  
	echo -e "\e[0;0m the file named as \e[0;32m"$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.indvidual_ins.bed \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".individual_ins.bed \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed \e[0;0m has been generated"

    echo "Step-C has been completed."


# DDDDD     DDDDD DDDDD     DDDDD 
#   DDDDD DDDDD     DDDDD DDDDD   
#      DDDDD           DDDDD      
#   DDDDD DDDDD     DDDDD DDDDD   
# DDDDD     DDDDD DDDDD     DDDDD 
# DDDDD     DDDDD DDDDD     DDDDD 
#   DDDDD DDDDD     DDDDD DDDDD   
#      DDDDD           DDDDD      
#   DDDDD DDDDD     DDDDD DDDDD   
# DDDDD     DDDDD DDDDD     DDDDD  
# DDDDD     DDDDD DDDDD     DDDDD 
#   DDDDD DDDDD     DDDDD DDDDD   
#      DDDDD           DDDDD      
#   DDDDD DDDDD     DDDDD DDDDD   
# DDDDD     DDDDD DDDDD     DDDDD 


elif [[ $Major_step == "D" || $Major_step == "d" ]]; then

    echo "1. Calculate sensitivity"
    echo "2. Report TPM cutff at 90, 95% sensitivity "
    echo "3. Draw sensitivity plot"
    echo "4. Identicate novel polymorpic MEI candidates (required step 2) (TPM cutoff)"
    echo "5. Draw number of loci by TPM cutoff"
    echo "6. Draw boxplot of number of loci by TPM cutoff(required step 5)"
    echo "7. Draw number of new loci by TPM cutoff per unrelated individuals (required step 4)" 
    echo "8. Draw boxplot of number of new loci by TPM cutoff per unrelated individuals (required step 7)"
    echo "9. Draw cumulative  number of new loci  from unrelated individuals at chosen TPM cutoff (required step 4)"
    echo "10. Draw pie chart for showing intersection with functional regions"
    echo "11. Draw heatmap of intersection with ENCODE regulatory region (ChromHMM)"
    echo "12. Make table for identifying de novo insertion and Draw histogram of unique mapping reads from de novo insertion"
    echo "13. Draw the number of de novo loci by TPM cutoff"
    echo "14. Draw distribution on  chromosome, distance away from centromere"
    echo "15. Extract the sequences from targeted loci"

	read input_BB

    # Record history
    date=$(date)
    echo $date" "$Software$Software_ver" "$Software_sub" Step-"$Major_step" "$input_BB" was operated. "$MEI >> $path_current"history"$option_tag"log"

    # Preparation 
    libraries=$(ls|grep Sample| awk -F _ '{ print $2 }')
    arr_lib=($libraries)
    set $libraries
    number_lib=$(echo $#)   
    echo $number_lib" libraries are detected..................................."

	# common file name
    file_1st_candidates_plus=$path_output"1st_candidates_plus."$MEI$option_tag"temp"
    file_1st_candidates_minus=$path_output"1st_candidates_minus."$MEI$option_tag"temp"

#>>>> Check_point_1 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    if [[ $input_BB == "1" ]]; then

    cmd_results_sensitivity_stuff="mkdir "$path_Result"sensitivity_stuff/ 2>/dev/null"
    eval $cmd_results_sensitivity_stuff

	## column 1.cutoff by depth 2.TP(ref-present, detection-present) 3. FP(ref-absent, detection-present) 
	##                 4. FN (ref-present, detection-absent) 5.TN (ref-absent, detection-absent)
    # Sensitivity of BB coverage by cutoff depth
    rm_file_Sensitivity="rm "$path_Result"sensitivity_stuff/*BB.sensi_each 2>/dev/null"
    rm_file_Depth="rm "$path_Result"sensitivity_stuff/*BB.depth_each 2>/dev/null "
    rm_file_TPM="rm "$path_Result"sensitivity_stuff/*BB.tpm_each 2>/dev/null"
    rm_file_Sensitivity_all="rm "$path_Result"sensitivity_stuff/*BB.sensi_all 2>/dev/null"
    rm_file_Depth_all="rm "$path_Result"sensitivity_stuff/*BB.depth_all 2>/dev/null "
    rm_file_TPM_all="rm "$path_Result"sensitivity_stuff/*BB.tpm_all 2>/dev/null"

    eval $rm_file_Sensitivity   
    eval $rm_file_Depth
    eval $rm_file_TPM
    eval $rm_file_Sensitivity_all   
    eval $rm_file_Depth_all
    eval $rm_file_TPM_all

    echo "This work takes hours if it run until zero, you can choose bottom value of sensitivity of 0-100(%). We recommend to input 85(%) to show greater than 1%"
    read bottom_sensitivity

    echo "To save time, you choose interval of depth for each individual and pooled data (exampe: 1 100)"
    read each_interval all_interval

    echo "This step requires a lot of memory and time. If you want to kill previous Sensitivity step, press 'K' key"
    read kill_sensitivity

    if [[ $kill_sensitivity == "K" || $kill_sensitivity == "k" ]]; then
 		for KILLPID in $(ps aux | grep $USER |grep 'modules/Sensitivity_calculator.sh' | awk ' { print $2;}')
 		do    
 			cmd_kill="kill -9 "$KILLPID
 			eval $cmd_kill
 		done 
 	else
 		echo "You kept previous Sensitivity_calculator.sh process"
 	fi

	THREADS=$cores

    for i in $(seq $number_lib)
	    do

	    each_lib=${arr_lib[$i-1]}

	    cmd_Sensitivity=$path_modules"Sensitivity_calculator.sh "$each_lib" "$MEI" "$option_tag" "$bottom_sensitivity" "$window_size" "$primer_position" "$each_interval
	    eval $cmd_Sensitivity&
	    echo $i"/"$number_lib" in Sensitivity_calculator.sh are running.. "

	            sleep 10
	           ###### checking_job1
	            checker1=$(expr $i '%' $THREADS == 0)
	            if [ $checker1 = 1 ]
	            then
	                echo -e "\e[0;31m After the currnt set of libaries will be completed, the processing of next sets will start.. \e[0;0m"            

	                for job1 in $(jobs -p)
	                do
	                    wait $job1
	                done
	 
	            fi
           
		while [ $(eval "cat "$path_Result"sensitivity_stuff/*"$option_tag"BB.depth_each 2>/dev/null|wc -l") -ne $(eval "cat "$path_Result"sensitivity_stuff/*"$option_tag"BB.tpm_each 2>/dev/null|wc -l") ]; do     sleep 10;      done
		while [ $(eval "cat "$path_Result"sensitivity_stuff/*"$option_tag"BB.depth_each 2>/dev/null|wc -l") -ne $(eval "cat "$path_Result"sensitivity_stuff/*"$option_tag"BB.sensi_each 2>/dev/null|wc -l") ]; do     sleep 10;      done

	    done 

	    while [ $(eval "ls "$path_Result"sensitivity_stuff/*"$option_tag"BB.depth_each 2>/dev/null|wc -l") -lt $number_lib ]; do     sleep 10;      done
        echo "Calculation of sensitivity for each samples are done. "
        echo "Ready to calculate sensitivity for pooled samples  "

    # for pooled sample
        cmd_Sensitivity_all=$path_modules"Sensitivity_calculator_all.sh "$MEI" "$option_tag" "$bottom_sensitivity" "$window_size" "$primer_position" "$all_interval
        eval $cmd_Sensitivity_all&
        echo " Sensitivity_calculator_all.sh are running.. "

           
        while [ $(eval "cat "$path_Result"sensitivity_stuff/*"$option_tag"BB.depth_all 2>/dev/null|wc -l") -ne $(eval "cat "$path_Result"sensitivity_stuff/*"$option_tag"BB.tpm_all 2>/dev/null|wc -l") ]; do     sleep 10;      done
        while [ $(eval "cat "$path_Result"sensitivity_stuff/*"$option_tag"BB.depth_all 2>/dev/null|wc -l") -ne $(eval "cat "$path_Result"sensitivity_stuff/*"$option_tag"BB.sensi_all 2>/dev/null|wc -l") ]; do     sleep 10;      done
        while [ $(eval "ls "$path_Result"sensitivity_stuff/*"$option_tag"BB.depth_all 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

        echo "All calculations for sensitivity are done .. Ready for next steps"


#>>>> Check_point_2 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "2" ]]; then
    	# mean and median TPM cutoff at 90,95% sensitivity
    	rm_tpm_stats="rm "$path_Result"sensitivity_stuff/tpm_stats_mean_median.txt 2>/dev/null"
    	eval $rm_tpm_stats

		for percent_sensitivity in 90 95
		do
			rm_stats="rm "$path_Result"sensitivity_stuff/TPM_stats_"$percent_sensitivity".txt 2>/dev/null"
			eval $rm_stats
			float_sensitivity=$(echo $percent_sensitivity/100|bc -l)

			## look for tpm values when sensistivity cutoff close to X% sensistivity cutoff
		    for i in $(seq $number_lib)
			    do
			    each_lib=${arr_lib[$i-1]}
			    TPM_stats="paste "$path_Result"sensitivity_stuff/"$each_lib$option_tag"BB.sensi_each "$path_Result"sensitivity_stuff/"$each_lib$option_tag"BB.tpm_each|awk '\$1>="$float_sensitivity" {print \$2\"\\t"$each_lib"\"}'|tail -1 >> "$path_Result"sensitivity_stuff/TPM_stats_"$percent_sensitivity".txt"
			    eval $TPM_stats
				done

			cmd_mean_value="cat "$path_Result"sensitivity_stuff/TPM_stats_"$percent_sensitivity".txt|awk '{x[NR]=\$1; s+=\$1} END{a=s/NR; for (i in x){ss += (x[i]-a)^2} sd = sqrt(ss/NR); print a\"+\"sd}'"
			cmd_median_value="sort -T "$path_sort_temporary_directory" -n "$path_Result"sensitivity_stuff/TPM_stats_"$percent_sensitivity".txt |awk ' { a[i++]=\$1; } END { print a[int(i/2)]; }'"

			mean_value=$(eval $cmd_mean_value)
			median_value=$(eval $cmd_median_value)

			echo "If sensitivity cutoff is "$percent_sensitivity"%, mean value is "$mean_value", and median value is "$median_value
		    echo "If sensitivity cutoff is "$percent_sensitivity"%, mean value is "$mean_value", and median value is "$median_value >> $path_Result"sensitivity_stuff/tpm_stats_mean_median.txt"
			echo ""
		done

    	rm_tpm_stats_all="rm "$path_Result"sensitivity_stuff/tpm_stats_mean_median_all.txt 2>/dev/null"
    	eval $rm_tpm_stats_all

    # for pooled sample    	
		for percent_sensitivity_all in 90 95
		do
			rm_stats_all="rm "$path_Result"sensitivity_stuff/TPM_stats_"$percent_sensitivity"_all.txt 2>/dev/null"
			eval $rm_stats_all
			float_sensitivity_all=$(echo $percent_sensitivity_all/100|bc -l)

			## look for tpm values when sensistivity cutoff close to X% sensistivity cutoff
			    TPM_stats_all="paste "$path_Result"sensitivity_stuff/"$MEI$option_tag"BB.sensi_all "$path_Result"sensitivity_stuff/"$MEI$option_tag"BB.tpm_all|awk '\$1>="$float_sensitivity_all" {print \$2\"\\t"$each_lib"\"}'|tail -1 >> "$path_Result"sensitivity_stuff/TPM_stats_"$percent_sensitivity"_all.txt"
			    eval $TPM_stats_all

			cmd_mean_value_all="cat "$path_Result"sensitivity_stuff/TPM_stats_"$percent_sensitivity"_all.txt|awk '{x[NR]=\$1; s+=\$1} END{a=s/NR; for (i in x){ss += (x[i]-a)^2} sd = sqrt(ss/NR); print a\"+\"sd}'"
			cmd_median_value_all="sort -T "$path_sort_temporary_directory" -n "$path_Result"sensitivity_stuff/TPM_stats_"$percent_sensitivity"_all.txt |awk ' { a[i++]=\$1; } END { print a[int(i/2)]; }'"

			mean_value_all=$(eval $cmd_mean_value_all)
			median_value_all=$(eval $cmd_median_value_all)

			echo "If sensitivity cutoff in pooled data is "$percent_sensitivity_all"%, mean value is "$mean_value_all", and median value is "$median_value_all
		    echo "If sensitivity cutoff in pooled data is "$percent_sensitivity_all"%, mean value is "$mean_value_all", and median value is "$median_value_all >> $path_Result"sensitivity_stuff/tpm_stats_mean_median_all.txt"
			echo ""
		done

#>>>> Check_point_3 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "3" ]]; then

    cmd_showing_meanTPM="cat "$path_Result"sensitivity_stuff/tpm_stats_mean_median.txt"
    eval $cmd_showing_meanTPM

	echo "Input xlim (min max) for creating senstivity plot of each individual:"
	read min max

	rm_sensitivity_pdf="rm "$path_Result"Sensitivity_plot"$min"_"$max".pdf 2>/dev/null"
    eval $rm_sensitivity_pdf
	
    cmd_drawing_sensitivity=$path_python3"python3 "$path_modules"drawing_sensitivity.py --min "$min" --max "$max" --input_folder "$path_Result"sensitivity_stuff/ --output "$path_Result"Sensitivity_plot"$min"_"$max".pdf  --stag each"
	eval $cmd_drawing_sensitivity

	echo $cmd_drawing_sensitivity > $path_current"drawing_"$USER$option_tag".sh"
	eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
	eval "source "$path_current"drawing_"$USER$option_tag".sh"

    while [ $(eval "ls "$path_Result"Sensitivity_plot"$min"_"$max".pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done	
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"Sensitivity_plot"$min"_"$max".pdf \e[0;0m has been generated"
 
    # for pooled sample
    cmd_showing_meanTPM_all="cat "$path_Result"sensitivity_stuff/tpm_stats_mean_median_all.txt"
    eval $cmd_showing_meanTPM_all

	echo "Input xlim (min max) for creating senstivity plot of pooled data:"
	read min_all max_all

	rm_sensitivity_pdf_all="rm "$path_Result"Sensitivity_plot"$min_all"_"$max_all"_all.pdf 2>/dev/null"
    eval $rm_sensitivity_pdf_all
	
    cmd_drawing_sensitivity_all=$path_python3"python3 "$path_modules"drawing_sensitivity.py --min "$min_all" --max "$max_all" --input_folder "$path_Result"sensitivity_stuff/ --output "$path_Result"Sensitivity_plot"$min_all"_"$max_all"_all.pdf --stag all"
	eval $cmd_drawing_sensitivity_all

	echo $cmd_drawing_sensitivity_all > $path_current"drawing_"$USER$option_tag".sh"
	eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
	eval "source "$path_current"drawing_"$USER$option_tag".sh"

    while [ $(eval "ls "$path_Result"Sensitivity_plot"$min_all"_"$max_all"_all.pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done	
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"Sensitivity_plot"$min_all"_"$max_all"_all.pdf \e[0;0m has been generated"


#>>>> Check_point_4 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "4" ]]; then

    rm_1st_candidates_plus="rm "$file_1st_candidates_plus" 2>/dev/null"
    rm_1st_candidates_minus="rm "$file_1st_candidates_minus" 2>/dev/null"

    eval $rm_1st_candidates_plus
    eval $rm_1st_candidates_minus


    cmd_additional_filter_RepeatMasker="cat "$path_ref_mescan"hg19.fa.bed|grep -e \""$MEI_ref_RM"\" >"$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp"    # ready file to make filter3  
    eval $cmd_additional_filter_RepeatMasker

    THREADS=$cores
    for i in $(seq $number_lib)
	    do

	    each_lib=${arr_lib[$i-1]}
	    read2=$(ls $path_current"Sample_"$each_lib"/"*.fastq|grep -E "$each_lib.*fastq"|grep R2|awk -F"." '{print $1}')
	    cmd_mapped_reads=$path_samtools"samtools idxstats "$read2"_BB_sorted.bam|awk ' {sum+=\$3} END {print sum}'"
	    mapped_reads=$(eval $cmd_mapped_reads)

	    cmd_1st_candidates_plus="nice -10 awk '\$5==\""$each_lib"\"{array[\$6]=\$1\"\\t\"\$3\"\\t\"\$3;depth[\$6]+=\$4;no_var[\$6]+=1} END {for (i in array) {print array[i]\"\\t"$each_lib"\\t\"depth[i]*1000000/"$mapped_reads"\"\\t\"no_var[i]\"\\t\"i}}'  "$path_output$MEI"_all.insert_plus"$option_tag"temp|sed 's/chrX/23/g'|sed 's/chrY/24/g'|sed 's/^chr//g'|sort -T "$path_sort_temporary_directory" -k1n -k3n|sed 's/^/chr/g'|sed 's/chr23/chrX/g'|sed 's/chr24/chrY/g' >> "$file_1st_candidates_plus
        cmd_1st_candidates_minus="nice -10 awk '\$5==\""$each_lib"\"{depth[\$6]+=\$4;no_var[\$6]+=1;if (\$6!=mtag)array[\$6]=\$1\"\\t\"\$3\"\\t\"\$3;mtag=\$6} END {for (i in array){print array[i]\"\\t"$each_lib"\\t\"depth[i]*1000000/"$mapped_reads"\"\\t\"no_var[i]\"\\t\"i}}'  "$path_output$MEI"_all.insert_minus"$option_tag"temp|sed 's/chrX/23/g'|sed 's/chrY/24/g'|sed 's/^chr//g'|sort -T "$path_sort_temporary_directory"  -k1n -k2n|sed 's/^/chr/g'|sed 's/chr23/chrX/g'|sed 's/chr24/chrY/g' >> "$file_1st_candidates_minus

	    eval $cmd_1st_candidates_plus
	    eval $cmd_1st_candidates_minus

	    done

    file_polymorphism_plus=$path_output"Polymorphic_insertion_plus."$MEI$option_tag"BB.bed"
    file_polymorphism_minus=$path_output"Polymorphic_insertion_minus."$MEI$option_tag"BB.bed"
    file_polymorphism_novel_plus=$path_output"Novel_polymorphic_insertion_plus."$MEI$option_tag"BB.bed"
    file_polymorphism_novel_minus=$path_output"Novel_polymorphic_insertion_minus."$MEI$option_tag"BB.bed"

# whole polymorphic MEI candidates from ME-Scan
    cmd_polymorphism_plus="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n>"$file_polymorphism_plus
    cmd_polymorphism_minus="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n>"$file_polymorphism_minus
    eval $cmd_polymorphism_plus;eval $cmd_polymorphism_minus

# novel polymorphic MEI candidates after removing known polymorphism & unfiltered by RepeatMasker

    cmd_polymorphism_novel_plus="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n>"$file_polymorphism_novel_plus
    cmd_polymorphism_novel_minus="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n>"$file_polymorphism_novel_minus
    eval $cmd_polymorphism_novel_plus;eval $cmd_polymorphism_novel_minus

	while [ $(eval "ls "$file_polymorphism_plus" 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
	while [ $(eval "ls "$file_polymorphism_minus" 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    while [ $(eval "ls "$file_polymorphism_novel_plus" 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    while [ $(eval "ls "$file_polymorphism_novel_minus" 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    echo -e "\e[0;0m the file named as \e[0;32m"$file_polymorphism_plus"\e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$file_polymorphism_minus"\e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$file_polymorphism_novel_plus"\e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$file_polymorphism_novel_minus"\e[0;0m has been generated"
## TPM cutoff

    cmd_showing_meanTPM="cat "$path_Result"sensitivity_stuff/tpm_stats_mean_median.txt"
    eval $cmd_showing_meanTPM

    echo "Input the TPM cutoff:"
    read TPM

	file_1st_candidates_plus_TPMcutoff=$path_output"1st_candidates_plus."$MEI$option_tag"TPM"$TPM".temp"
	file_1st_candidates_minus_TPMcutoff=$path_output"1st_candidates_minus."$MEI$option_tag"TPM"$TPM".temp"
    file_polymorphism_plus_TPMcutoff=$path_output"Polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.bed"
    file_polymorphism_minus_TPMcutoff=$path_output"Polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.bed"
    file_polymorphism_novel_plus_TPMcutoff=$path_output"Novel_polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.bed"
    file_polymorphism_novel_minus_TPMcutoff=$path_output"Novel_polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.bed"

    rm_1st_candidates_plus_TPMcutoff="rm "$file_1st_candidates_plus_TPMcutoff" 2>/dev/null"
    rm_1st_candidates_minus_TPMcutoff="rm "$file_1st_candidates_minus_TPMcutoff" 2>/dev/null"
    rm_file_polymorphism_plus_TPMcutoff="rm "$file_polymorphism_plus_TPMcutoff" 2>/dev/null"
    rm_file_polymorphism_minus_TPMcutoff="rm "$file_polymorphism_minus_TPMcutoff" 2>/dev/null"
    rm_file_polymorphism_novel_plus_TPMcutoff="rm "$file_polymorphism_novel_plus_TPMcutoff" 2>/dev/null"
    rm_file_polymorphism_novel_minus_TPMcutoff="rm "$file_polymorphism_novel_minus_TPMcutoff" 2>/dev/null"
 
    eval $rm_1st_candidates_plus_TPMcutoff;eval $rm_1st_candidates_minus_TPMcutoff
    eval $rm_file_polymorphism_plus_TPMcutoff;eval $rm_file_polymorphism_minus_TPMcutoff
    eval $rm_file_polymorphism_novel_plus_TPMcutoff;eval $rm_file_polymorphism_novel_minus_TPMcutoff

    cmd_file_1st_candidates_plus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_plus" >"$file_1st_candidates_plus_TPMcutoff
    cmd_file_1st_candidates_minus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_minus" >"$file_1st_candidates_minus_TPMcutoff
    eval $cmd_file_1st_candidates_plus_TPMcutoff;eval $cmd_file_1st_candidates_minus_TPMcutoff

    cmd_polymorphism_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_plus_TPMcutoff
    cmd_polymorphism_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_minus_TPMcutoff
    eval $cmd_polymorphism_plus_TPMcutoff;eval $cmd_polymorphism_minus_TPMcutoff

    cmd_polymorphism_novel_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_plus_TPMcutoff
    cmd_polymorphism_novel_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin  -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_minus_TPMcutoff
    eval $cmd_polymorphism_novel_plus_TPMcutoff;eval $cmd_polymorphism_novel_minus_TPMcutoff

	while [ $(eval "ls "$file_polymorphism_plus_TPMcutoff" 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
	while [ $(eval "ls "$file_polymorphism_minus_TPMcutoff" 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    while [ $(eval "ls "$file_polymorphism_novel_plus_TPMcutoff" 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    while [ $(eval "ls "$file_polymorphism_novel_minus_TPMcutoff" 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    echo -e "\e[0;0m the file named as \e[0;32m"$file_polymorphism_plus_TPMcutoff"\e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$file_polymorphism_minus_TPMcutoff"\e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$file_polymorphism_novel_plus_TPMcutoff"\e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$file_polymorphism_novel_minus_TPMcutoff"\e[0;0m has been generated"

#>>>> Check_point_5 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "5" ]]; then 
	
	rm_loci_number_PDF="rm "$path_Result"loci_number_TPM.pdf 2>/dev/null"
	eval $rm_loci_number_PDF

    # rm loci_number_TPM.report
    rm_loci_number="rm "$path_Result"loci_number_TPM.report 2>/dev/null"
    eval $rm_loci_number

  	# = Number of loci by TPM cutoff  	
  	file_1st_candidates=$path_output"1st_candidates_*."$MEI$option_tag"temp"

	echo "Input the range of TPM cutoff (input format:min max interval) (example:0 10 1):"
	read min max interval

    cmd_mkdir_stuff="mkdir "$path_Result"loci_num_stuff/ 2>/dev/null"
    eval $cmd_mkdir_stuff

# header
	i=$min
	cmd_header="Lib-TPM_cutoff"
	while [[ 1 -eq "$(echo "$i <= $max" | bc)" ]]; do 
		cmd_header=$cmd_header"\t"$i
 		i=$(echo $i+$interval|bc -l)
	done

	echo -e $cmd_header > $path_Result"loci_number_TPM.report"

# cacluate number
	i=$min
	while [[ 1 -eq "$(echo "$i <= $max" | bc)" ]]; do 
		cmd_make_join="cat "$file_1st_candidates"|awk '\$5>="$i"{print \$4}'|sort|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"loci_num_stuff/join"$i".temp"
 		eval $cmd_make_join 

		i=$(echo $i+$interval|bc -l)
	done

# merge multiple files 
	i=$(echo $min+$interval|bc -l)
	cmd_join_initial="join "$path_Result"loci_num_stuff/join"$min".temp "$path_Result"loci_num_stuff/join"$i".temp"	
	cmd_join=""
	i=$(echo $i+$interval|bc -l)
	while [[ 1 -eq "$(echo "$i <= $max" | bc)" ]]; do 
		cmd_join=$cmd_join"|join - "$path_Result"loci_num_stuff/join"$i".temp"	
		i=$(echo $i+$interval|bc -l)
	done
	cmd_join_final=$(echo $cmd_join_initial$cmd_join)
	eval $cmd_join_final >> $path_Result"loci_number_TPM.report"

	num=$(($max - $min + 1))

	cmd_drawing_num_loci=$path_python3"python3 "$path_modules"drawing_num_loci_by_TPM.py --num "$num" --input "$path_Result"loci_number_TPM.report --output "$path_Result"loci_number_TPM.pdf" 

	echo $cmd_drawing_num_loci > $path_current"drawing_"$USER$option_tag".sh"
	eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
	eval "source "$path_current"drawing_"$USER$option_tag".sh"

	while [ $(eval "ls "$path_Result"loci_number_TPM.pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"loci_number_TPM.pdf \e[0;0m has been generated"

#>>>> Check_point_6 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "6" ]]; then

    rm_loci_TPM_boxplot="rm "$path_Result"loci_number_TPM_boxplot.pdf 2>/dev/null"
    eval $rm_loci_TPM_boxplot

    cmd_drawing_num_loci_boxplot=$path_python3"python3 "$path_modules"drawing_num_loci_by_TPM.boxplot.py --input "$path_Result"loci_number_TPM.report --output "$path_Result"loci_number_TPM_boxplot.pdf" 
    echo $cmd_drawing_num_loci_boxplot > $path_current"drawing_"$USER$option_tag".sh"
	eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
	eval "source "$path_current"drawing_"$USER$option_tag".sh"

	while [ $(eval "ls "$path_Result"loci_number_TPM_boxplot.pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"loci_number_TPM_boxplot.pdf \e[0;0m has been generated"

#>>>> Check_point_7 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "7" ]]; then
    rm_novel_loci_number="rm "$path_Result"novel_loci_number_TPM.report 2>/dev/null"
    rm_novel_loci_number_PDF="rm "$path_Result"novel_loci_number_TPM.pdf 2>/dev/null"
    rm_total_novel_loci_number="rm "$path_Result"total_novel_loci_number_TPM.report 2>/dev/null"
    eval $rm_novel_loci_number
    eval $rm_novel_loci_number_PDF
    eval $rm_total_novel_loci_number

# make the list of unreated individuals (== without kids)    
    cmd_unrelated="awk '\$3==0 && \$4==0 {print \$2}' "$path_mescan"example_family_list/family_list.ped|sort -T "$path_sort_temporary_directory" -k 1b,1> "$path_current"unrelated_"$USER".list"
    eval $cmd_unrelated

    echo "Input the range of TPM cutoff (input format:min max interval) (example:0 10 1):"
    read min max interval

# cacluate number
    i=$min
    while [[ 1 -eq "$(echo "$i <= $max" | bc)" ]]; do 

        TPM=$i
        
	    file_1st_candidates_plus_TPMcutoff=$path_Result"loci_num_stuff/1st_candidates_plus."$MEI$option_tag"TPM"$TPM".temp"
	    file_1st_candidates_minus_TPMcutoff=$path_Result"loci_num_stuff/1st_candidates_minus."$MEI$option_tag"TPM"$TPM".temp"
	    file_polymorphism_plus_TPMcutoff=$path_Result"loci_num_stuff/Polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.temp"
	    file_polymorphism_minus_TPMcutoff=$path_Result"loci_num_stuff/Polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.temp"
	    file_polymorphism_novel_plus_TPMcutoff=$path_Result"loci_num_stuff/Novel_polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.temp"
	    file_polymorphism_novel_minus_TPMcutoff=$path_Result"loci_num_stuff/Novel_polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.temp"

	    file_polymorphism_TPMcutoff=$path_Result"loci_num_stuff/Polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.temp"
	    file_polymorphism_novel_TPMcutoff=$path_Result"loci_num_stuff/Novel_polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.temp"

	    rm_1st_candidates_plus_TPMcutoff="rm "$file_1st_candidates_plus_TPMcutoff" 2>/dev/null"
	    rm_1st_candidates_minus_TPMcutoff="rm "$file_1st_candidates_minus_TPMcutoff" 2>/dev/null"
	    rm_file_polymorphism_plus_TPMcutoff="rm "$file_polymorphism_plus_TPMcutoff" 2>/dev/null"
	    rm_file_polymorphism_minus_TPMcutoff="rm "$file_polymorphism_minus_TPMcutoff" 2>/dev/null"
	    rm_file_polymorphism_novel_plus_TPMcutoff="rm "$file_polymorphism_novel_plus_TPMcutoff" 2>/dev/null"
	    rm_file_polymorphism_novel_minus_TPMcutoff="rm "$file_polymorphism_novel_minus_TPMcutoff" 2>/dev/null"
	 
	    cmd_file_1st_candidates_plus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_plus" >"$file_1st_candidates_plus_TPMcutoff
	    cmd_file_1st_candidates_minus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_minus" >"$file_1st_candidates_minus_TPMcutoff
	    eval $cmd_file_1st_candidates_plus_TPMcutoff;eval $cmd_file_1st_candidates_minus_TPMcutoff

	    cmd_polymorphism_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_plus_TPMcutoff
	    cmd_polymorphism_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_minus_TPMcutoff
	    eval $cmd_polymorphism_plus_TPMcutoff;eval $cmd_polymorphism_minus_TPMcutoff

	    cmd_polymorphism_novel_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_plus_TPMcutoff
	    cmd_polymorphism_novel_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin  -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_minus_TPMcutoff
	    eval $cmd_polymorphism_novel_plus_TPMcutoff;eval $cmd_polymorphism_novel_minus_TPMcutoff

        cmd_make_join_polymorphism="cat "$file_polymorphism_TPMcutoff"|awk '{print \$8}'|sed 's/,/\n/g'|awk 'length(\$1)!=0'|sort|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"loci_num_stuff/join_polymorphism"$i".temp"
        eval $cmd_make_join_polymorphism

        cmd_make_join_polymorphism_total="cat "$file_polymorphism_TPMcutoff"|wc -l |awk '{print \"total\\t\"\$1}'> "$path_Result"loci_num_stuff/join_polymorphism_total"$i".temp"
        eval $cmd_make_join_polymorphism_total

        cmd_make_join_novel="cat "$file_polymorphism_novel_TPMcutoff"|awk '{print \$8}'|sed 's/,/\n/g'|awk 'length(\$1)!=0'|sort|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"loci_num_stuff/join_novel"$i".temp"
        eval $cmd_make_join_novel

        cmd_make_join_novel_total="cat "$file_polymorphism_novel_TPMcutoff"|wc -l |awk '{print \"total\\t\"\$1}'> "$path_Result"loci_num_stuff/join_novel_total"$i".temp"
        eval $cmd_make_join_novel_total
        i=$(echo $i+$interval|bc -l)

    done

## for polymorphsim
 # merge multiple files 
    i=$(echo $min+$interval|bc -l)
    cmd_join_polymorphism_initial="join "$path_Result"loci_num_stuff/join_polymorphism"$min".temp "$path_Result"loci_num_stuff/join_polymorphism"$i".temp"    
    cmd_join_polymorphism=""
    cmd_join_polymorphism_total_initial="join "$path_Result"loci_num_stuff/join_polymorphism_total"$min".temp "$path_Result"loci_num_stuff/join_polymorphism_total"$i".temp"    
    cmd_join_polymorphism_total=""
    i=$(echo $i+$interval|bc -l)
    while [[ 1 -eq "$(echo "$i <= $max" | bc)" ]]; do 
        cmd_join_polymorphism=$cmd_join_polymorphism"|join - "$path_Result"loci_num_stuff/join_polymorphism"$i".temp"    
        cmd_join_polymorphism_total=$cmd_join_polymorphism_total"|join - "$path_Result"loci_num_stuff/join_polymorphism_total"$i".temp"    
        i=$(echo $i+$interval|bc -l)       
    done
    cmd_join_polymorphism_final=$(echo $cmd_join_polymorphism_initial$cmd_join_polymorphism)
    cmd_join_polymorphism_total_final=$(echo $cmd_join_polymorphism_total_initial$cmd_join_polymorphism_total)
    eval $cmd_join_polymorphism_final|sort -T $path_sort_temporary_directory -k 1b,1 > $path_Result"pre_polymorphism_loci_number_TPM.temp"
    eval $cmd_join_polymorphism_total_final > $path_Result"total_polymorphism_loci_number_TPM.report"

# header
    i=$min
    cmd_header="Lib-TPM_cutoff"
    while [[ 1 -eq "$(echo "$i <= $max" | bc)" ]]; do 
        cmd_header=$cmd_header"\t"$i
        i=$(echo $i+$interval|bc -l)
    done
    echo -e $cmd_header > $path_Result"polymorphism_loci_number_TPM.report"

# choose unrelated individuals
    cmd_choose_unrelated_individiuals="join "$path_Result"pre_polymorphism_loci_number_TPM.temp "$path_current"unrelated_"$USER".list >> "$path_Result"polymorphism_loci_number_TPM.report"
    eval $cmd_choose_unrelated_individiuals

    num=$(($max - $min + 1 ))

    cmd_drawing_polymorphism_num_loci=$path_python3"python3 "$path_modules"drawing_num_loci_by_TPM.py --num "$num" --input "$path_Result"polymorphism_loci_number_TPM.report --output "$path_Result"polymorphism_loci_number_TPM.pdf"
    echo $cmd_drawing_polymorphism_num_loci > $path_current"drawing_"$USER$option_tag".sh"
    eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
    eval "source "$path_current"drawing_"$USER$option_tag".sh"

    while [ $(eval "ls "$path_Result"polymorphism_loci_number_TPM.report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    while [ $(eval "ls "$path_Result"polymorphism_loci_number_TPM.pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    while [ $(eval "ls "$path_Result"total_polymorphism_loci_number_TPM.report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"polymorphism_loci_number_TPM.report \e[0;0m has been generated"    
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"polymorphism_loci_number_TPM.pdf \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"total_polymorphism_loci_number_TPM.report \e[0;0m has been generated"

## for novel polymorphsim
# merge multiple files 
    i=$(echo $min+$interval|bc -l)
    cmd_join_novel_initial="join "$path_Result"loci_num_stuff/join_novel"$min".temp "$path_Result"loci_num_stuff/join_novel"$i".temp"    
    cmd_join_novel=""
    cmd_join_novel_total_initial="join "$path_Result"loci_num_stuff/join_novel_total"$min".temp "$path_Result"loci_num_stuff/join_novel_total"$i".temp"    
    cmd_join_novel_total=""
    i=$(echo $i+$interval|bc -l)
    while [[ 1 -eq "$(echo "$i <= $max" | bc)" ]]; do 
        cmd_join_novel=$cmd_join_novel"|join - "$path_Result"loci_num_stuff/join_novel"$i".temp"    
        cmd_join_novel_total=$cmd_join_novel_total"|join - "$path_Result"loci_num_stuff/join_novel_total"$i".temp"    
        i=$(echo $i+$interval|bc -l)       
    done
    cmd_join_novel_final=$(echo $cmd_join_novel_initial$cmd_join_novel)
    cmd_join_novel_total_final=$(echo $cmd_join_novel_total_initial$cmd_join_novel_total)
    eval $cmd_join_novel_final|sort -T $path_sort_temporary_directory -k 1b,1 > $path_Result"pre_novel_loci_number_TPM.temp"
    eval $cmd_join_novel_total_final > $path_Result"total_novel_loci_number_TPM.report"

# header
    i=$min
    cmd_header="Lib-TPM_cutoff"
    while [[ 1 -eq "$(echo "$i <= $max" | bc)" ]]; do 
        cmd_header=$cmd_header"\t"$i
        i=$(echo $i+$interval|bc -l)
    done
    echo -e $cmd_header > $path_Result"novel_loci_number_TPM.report"

# choose unrelated individuals
    cmd_choose_unrelated_individiuals="join "$path_Result"pre_novel_loci_number_TPM.temp "$path_current"unrelated_"$USER".list >> "$path_Result"novel_loci_number_TPM.report"
    eval $cmd_choose_unrelated_individiuals

    num=$(($max - $min + 1 ))

    cmd_drawing_novel_num_loci=$path_python3"python3 "$path_modules"drawing_num_loci_by_TPM.py --num "$num" --input "$path_Result"novel_loci_number_TPM.report --output "$path_Result"novel_loci_number_TPM.pdf"
    echo $cmd_drawing_novel_num_loci > $path_current"drawing_"$USER$option_tag".sh"
    eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
    eval "source "$path_current"drawing_"$USER$option_tag".sh"

    while [ $(eval "ls "$path_Result"novel_loci_number_TPM.report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    while [ $(eval "ls "$path_Result"novel_loci_number_TPM.pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    while [ $(eval "ls "$path_Result"total_novel_loci_number_TPM.report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"novel_loci_number_TPM.report \e[0;0m has been generated"    
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"novel_loci_number_TPM.pdf \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"total_novel_loci_number_TPM.report \e[0;0m has been generated"

#>>>> Check_point_8 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "8" ]]; then

    rm_polymorphism_loci_number_boxplot="rm "$path_Result"polymorphism_loci_number_TPM_boxplot.pdf 2>/dev/null"
    eval $rm_polymorphism_loci_number_boxplot

    cmd_drawing_polymorphism_num_loci_boxplot=$path_python3"python3 "$path_modules"drawing_num_polymorphism_and_novel_loci_per_unrelated_individuals.boxplot.py --input "$path_Result"polymorphism_loci_number_TPM.report --input_total "$path_Result"total_polymorphism_loci_number_TPM.report --output "$path_Result"polymorphism_loci_number_TPM_boxplot.pdf"
    echo $cmd_drawing_polymorphism_num_loci_boxplot > $path_current"drawing_"$USER$option_tag".sh"
    eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
    eval "source "$path_current"drawing_"$USER$option_tag".sh"   

    while [ $(eval "ls "$path_Result"polymorphism_loci_number_TPM_boxplot.pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"polymorphism_loci_number_TPM_boxplot.pdf \e[0;0m has been generated"

    rm_novel_loci_number_boxplot="rm "$path_Result"novel_loci_number_TPM_boxplot.pdf 2>/dev/null"
    eval $rm_novel_loci_number_boxplot

    cmd_drawing_novel_num_loci_boxplot=$path_python3"python3 "$path_modules"drawing_num_polymorphism_and_novel_loci_per_unrelated_individuals.boxplot.py --input "$path_Result"novel_loci_number_TPM.report --input_total "$path_Result"total_novel_loci_number_TPM.report --output "$path_Result"novel_loci_number_TPM_boxplot.pdf"
    echo $cmd_drawing_novel_num_loci_boxplot > $path_current"drawing_"$USER$option_tag".sh"
    eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
    eval "source "$path_current"drawing_"$USER$option_tag".sh"   

    while [ $(eval "ls "$path_Result"novel_loci_number_TPM_boxplot.pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"novel_loci_number_TPM_boxplot.pdf \e[0;0m has been generated"

#>>>> Check_point_9 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "9" ]]; then

    rm_sample_temp="rm "$path_current"samples_"$USER".temp 2>/dev/null"
    eval $rm_sample_temp

    for i in $(seq $number_lib)
    	do    
    	each_lib=${arr_lib[$i-1]}
    	echo $each_lib >> $path_current"samples_"$USER".temp"
    	done
    cmd_sort_sample="cat "$path_current"samples_"$USER".temp|sort -T "$path_sort_temporary_directory" -k 1b,1 >"$path_current"samples_"$USER".list"
    eval $cmd_sort_sample  

# make the list of unreated individuals (== without kids)    
    cmd_unrelated_samples="join "$path_current"samples_"$USER".list "$path_current"unrelated_"$USER".list >"$path_current"unrelated_samples_"$USER".list"
    eval $cmd_unrelated_samples

    cmd_mkdir_cumulative_stuff="mkdir "$path_Result"cumulative_stuff/ 2>/dev/null" 
    eval $cmd_mkdir_cumulative_stuff

    cmd_showing_meanTPM="cat "$path_Result"sensitivity_stuff/tpm_stats_mean_median.txt"
    eval $cmd_showing_meanTPM

    echo "Input the TPM cutoff:"
    read TPM

	rm_cumulative_novel_loci_number="rm "$path_Result"cumulative_novel_loci_number_TPM"$TPM".report 2>/dev/null"
	rm_cumulative_novel_loci_number_PDF="rm "$path_Result"cumulative_novel_loci_number_TPM"$TPM".pdf 2>/dev/null"
	eval $rm_cumulative_novel_loci_number
	eval $rm_cumulative_novel_loci_number_PDF

	file_1st_candidates_plus_TPMcutoff=$path_Result"cumulative_stuff/1st_candidates_plus."$MEI$option_tag"TPM"$TPM".temp"
	file_1st_candidates_minus_TPMcutoff=$path_Result"cumulative_stuff/1st_candidates_minus."$MEI$option_tag"TPM"$TPM".temp"
	file_polymorphism_plus_TPMcutoff=$path_Result"cumulative_stuff/Polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_minus_TPMcutoff=$path_Result"cumulative_stuff/Polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_novel_plus_TPMcutoff=$path_Result"cumulative_stuff/Novel_polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_novel_minus_TPMcutoff=$path_Result"cumulative_stuff/Novel_polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.temp"

	file_polymorphism_TPMcutoff=$path_Result"cumulative_stuff/Polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_novel_TPMcutoff=$path_Result"cumulative_stuff/Novel_polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.temp"

	rm_1st_candidates_plus_TPMcutoff="rm "$file_1st_candidates_plus_TPMcutoff" 2>/dev/null"
	rm_1st_candidates_minus_TPMcutoff="rm "$file_1st_candidates_minus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_plus_TPMcutoff="rm "$file_polymorphism_plus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_minus_TPMcutoff="rm "$file_polymorphism_minus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_novel_plus_TPMcutoff="rm "$file_polymorphism_novel_plus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_novel_minus_TPMcutoff="rm "$file_polymorphism_novel_minus_TPMcutoff" 2>/dev/null"
	 
	eval $rm_1st_candidates_plus_TPMcutoff;eval $rm_1st_candidates_minus_TPMcutoff
    eval $rm_file_polymorphism_plus_TPMcutoff;eval $rm_file_polymorphism_minus_TPMcutoff
    eval $rm_file_polymorphism_novel_plus_TPMcutoff;eval $rm_file_polymorphism_novel_minus_TPMcutoff

	cmd_file_1st_candidates_plus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_plus" >"$file_1st_candidates_plus_TPMcutoff
	cmd_file_1st_candidates_minus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_minus" >"$file_1st_candidates_minus_TPMcutoff
	eval $cmd_file_1st_candidates_plus_TPMcutoff;eval $cmd_file_1st_candidates_minus_TPMcutoff

	cmd_polymorphism_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_plus_TPMcutoff
	cmd_polymorphism_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_minus_TPMcutoff
	eval $cmd_polymorphism_plus_TPMcutoff;eval $cmd_polymorphism_minus_TPMcutoff

	cmd_polymorphism_novel_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_plus_TPMcutoff
	cmd_polymorphism_novel_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin  -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_minus_TPMcutoff
	eval $cmd_polymorphism_novel_plus_TPMcutoff;eval $cmd_polymorphism_novel_minus_TPMcutoff

    cmd_temp_cumulative="cat "$file_polymorphism_TPMcutoff" > "$path_Result"cumulative_stuff/cumulative1.temp"
    eval $cmd_temp_cumulative

    cmd_temp_cumulative_novel="cat "$file_polymorphism_novel_TPMcutoff" > "$path_Result"cumulative_stuff/cumulative_novel1.temp"
    eval $cmd_temp_cumulative_novel

    k=1
    rm_report_polymorphism="rm "$path_Result"cumulative_polymorphism_loci_number_TPM"$TPM".report 2>/dev/null"
    eval $rm_report_polymorphism

    for i in $(cat $path_current"unrelated_samples_"$USER".list") 
	    do 
	    cmd_cumulative_number="cat "$path_Result"cumulative_stuff/cumulative"$k".temp|grep "$i"|wc -l>> "$path_Result"cumulative_polymorphism_loci_number_TPM"$TPM".report"
	    eval $cmd_cumulative_number

	    cmd_cumulative_number="cat "$path_Result"cumulative_stuff/cumulative"$k".temp|grep -v "$i"  > "$path_Result"cumulative_stuff/cumulative"$(echo $k+1|bc)".temp"
	    eval $cmd_cumulative_number
	    k=$(echo $k+1|bc)
	    done

    k=1
    rm_report_novel="rm "$path_Result"cumulative_novel_loci_number_TPM"$TPM".report 2>/dev/null"
    eval $rm_report_novel

    for i in $(cat $path_current"unrelated_samples_"$USER".list") 
	    do 
	    cmd_cumulative_novel_number="cat "$path_Result"cumulative_stuff/cumulative_novel"$k".temp|grep "$i"|wc -l>> "$path_Result"cumulative_novel_loci_number_TPM"$TPM".report"
	    eval $cmd_cumulative_novel_number

	    cmd_cumulative_novel_number="cat "$path_Result"cumulative_stuff/cumulative_novel"$k".temp|grep -v "$i"  > "$path_Result"cumulative_stuff/cumulative_novel"$(echo $k+1|bc)".temp"
	    eval $cmd_cumulative_novel_number
	    k=$(echo $k+1|bc)
	    done

	cmd_drawing_polymorphism_num_loci_cumulative=$path_python3"python3 "$path_modules"drawing_cumulative_plot_loci.py --input "$path_Result"cumulative_polymorphism_loci_number_TPM"$TPM".report --output "$path_Result"cumulative_polymorphism_loci_number_TPM"$TPM".pdf"
	echo $cmd_drawing_polymorphism_num_loci_cumulative > $path_current"drawing_"$USER$option_tag".sh"

	cmd_drawing_novel_num_loci_cumulative=$path_python3"python3 "$path_modules"drawing_cumulative_plot_loci.py --input "$path_Result"cumulative_novel_loci_number_TPM"$TPM".report --output "$path_Result"cumulative_novel_loci_number_TPM"$TPM".pdf"
	echo $cmd_drawing_novel_num_loci_cumulative >> $path_current"drawing_"$USER$option_tag".sh"
	eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
	eval "source "$path_current"drawing_"$USER$option_tag".sh"

	while [ $(eval "ls "$path_Result"cumulative_polymorphism_loci_number_TPM"$TPM".report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
	while [ $(eval "ls "$path_Result"cumulative_polymorphism_loci_number_TPM"$TPM".pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"cumulative_polymorphism_loci_number_TPM"$TPM".report \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"cumulative_polymorphism_loci_number_TPM"$TPM".pdf \e[0;0m has been generated"

	while [ $(eval "ls "$path_Result"cumulative_novel_loci_number_TPM"$TPM".report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
	while [ $(eval "ls "$path_Result"cumulative_novel_loci_number_TPM"$TPM".pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"cumulative_novel_loci_number_TPM"$TPM".report \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"cumulative_novel_loci_number_TPM"$TPM".pdf \e[0;0m has been generated"

#>>>> Check_point_10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "10" ]]; then

    cmd_mkdir_gene_stuff="mkdir "$path_Result"gene_stuff/ 2>/dev/null" 
    eval $cmd_mkdir_gene_stuff
    rm_gene="rm "$path_Result"gene_stuff/* 2>/dev/null"
    eval $rm_gene 

	rm_Intersection_gene_annotation="rm "$path_Result"Intersection_gene_annotation_TPM"$TPM".report 2>/dev/null"
	rm_Intersection_gene_annotation_PDF="rm "$path_Result"Intersection_gene_annotation_TPM"$TPM".pdf 2>/dev/null"    		
	eval $rm_Intersection_gene_annotation
	eval $rm_Intersection_gene_annotation_PDF

    cmd_showing_meanTPM="cat "$path_Result"sensitivity_stuff/tpm_stats_mean_median.txt"
    eval $cmd_showing_meanTPM

	echo "Input TPM cutoff for analyzing intersection with genomic region:"
	read TPM

	file_1st_candidates_plus_TPMcutoff=$path_Result"gene_stuff/1st_candidates_plus."$MEI$option_tag"TPM"$TPM".temp"
	file_1st_candidates_minus_TPMcutoff=$path_Result"gene_stuff/1st_candidates_minus."$MEI$option_tag"TPM"$TPM".temp"
	file_polymorphism_plus_TPMcutoff=$path_Result"gene_stuff/Polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_minus_TPMcutoff=$path_Result"gene_stuff/Polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_novel_plus_TPMcutoff=$path_Result"gene_stuff/Novel_polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_novel_minus_TPMcutoff=$path_Result"gene_stuff/Novel_polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.temp"

	file_polymorphism_TPMcutoff=$path_Result"gene_stuff/Polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_novel_TPMcutoff=$path_Result"gene_stuff/Novel_polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.temp"

	rm_1st_candidates_plus_TPMcutoff="rm "$file_1st_candidates_plus_TPMcutoff" 2>/dev/null"
	rm_1st_candidates_minus_TPMcutoff="rm "$file_1st_candidates_minus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_plus_TPMcutoff="rm "$file_polymorphism_plus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_minus_TPMcutoff="rm "$file_polymorphism_minus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_novel_plus_TPMcutoff="rm "$file_polymorphism_novel_plus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_novel_minus_TPMcutoff="rm "$file_polymorphism_novel_minus_TPMcutoff" 2>/dev/null"

	eval $rm_1st_candidates_plus_TPMcutoff;eval $rm_1st_candidates_minus_TPMcutoff
    eval $rm_file_polymorphism_plus_TPMcutoff;eval $rm_file_polymorphism_minus_TPMcutoff
    eval $rm_file_polymorphism_novel_plus_TPMcutoff;eval $rm_file_polymorphism_novel_minus_TPMcutoff

	cmd_file_1st_candidates_plus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_plus" >"$file_1st_candidates_plus_TPMcutoff
	cmd_file_1st_candidates_minus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_minus" >"$file_1st_candidates_minus_TPMcutoff
	eval $cmd_file_1st_candidates_plus_TPMcutoff;eval $cmd_file_1st_candidates_minus_TPMcutoff

	cmd_polymorphism_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_plus_TPMcutoff
	cmd_polymorphism_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_minus_TPMcutoff
	eval $cmd_polymorphism_plus_TPMcutoff;eval $cmd_polymorphism_minus_TPMcutoff

	cmd_polymorphism_novel_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_plus_TPMcutoff
	cmd_polymorphism_novel_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin  -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_minus_TPMcutoff
	eval $cmd_polymorphism_novel_plus_TPMcutoff;eval $cmd_polymorphism_novel_minus_TPMcutoff
	
	# whole polymorphism
	cmd_polymorphism_CDS_plus="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep CDS|grep -v UTR|wc -l|awk '{print \$1}'"

	cmd_polymorphism_CDS_minus="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep CDS|grep -v UTR|wc -l|awk '{print \$1}'"
	cmd_polymorphism_UTR_plus="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep -v CDS|grep UTR|wc -l|awk '{print \$1}'"
	cmd_polymorphism_UTR_minus="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep -v CDS|grep UTR|wc -l|awk '{print \$1}'"

	cmd_polymorphism_CDS_UTR_plus="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep CDS|grep UTR|wc -l|awk '{print \$1}'"
	cmd_polymorphism_CDS_UTR_minus="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep CDS|grep UTR|wc -l|awk '{print \$1}'"

	cmd_polymorphism_Undefined_exon_plus="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep exon|grep -v CDS|grep -v UTR|wc -l|awk '{print \$1}'"
	cmd_polymorphism_Undefined_exon_minus="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep exon|grep -v CDS|grep -v UTR|wc -l|awk '{print \$1}'"

	cmd_polymorphism_intron_plus="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep -v exon|wc -l|awk '{print \$1}'"
	cmd_polymorphism_intron_minus="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep -v exon|wc -l|awk '{print \$1}'"

    cmd_polymorphism_intergenic_plus="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb -v|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
    uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|wc -l|awk '{print \$1}'"
    cmd_polymorphism_intergenic_minus="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb -v|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
    uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|wc -l|awk '{print \$1}'"

 	eval "echo -e \"CDS=\"\$(echo \$(eval \$cmd_polymorphism_CDS_plus)+\$(eval \$cmd_polymorphism_CDS_minus)|bc)\"\\n\"\
	\"UTR=\"\$(echo \$(eval \$cmd_polymorphism_UTR_plus)+\$(eval \$cmd_polymorphism_UTR_minus)|bc)\"\\n\"\
	\"CDS_UTR=\"\$(echo \$(eval \$cmd_polymorphism_CDS_UTR_plus)+\$(eval \$cmd_polymorphism_CDS_UTR_minus)|bc)\"\\n\"\
	\"Undefined_exon=\"\$(echo \$(eval \$cmd_polymorphism_Undefined_exon_plus)+\$(eval \$cmd_polymorphism_Undefined_exon_minus)|bc)\"\\n\"\
	\"Intron=\"\$(echo \$(eval \$cmd_polymorphism_intron_plus)+\$(eval \$cmd_polymorphism_intron_minus)|bc)\"\\n\"\
    \"Intergenic=\"\$(echo \$(eval \$cmd_polymorphism_intergenic_plus)+\$(eval \$cmd_polymorphism_intergenic_minus)|bc)|sed 's/ //g'> "$path_Result"Intersection_gene_annotation_polymorphism_TPM"$TPM".report"
    
	# novel polymorphism

    cmd_novel_CDS_plus="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep CDS|grep -v UTR|wc -l|awk '{print \$1}'"

	cmd_novel_CDS_minus="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep CDS|grep -v UTR|wc -l|awk '{print \$1}'"
	cmd_novel_UTR_plus="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep -v CDS|grep UTR|wc -l|awk '{print \$1}'"
	cmd_novel_UTR_minus="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep -v CDS|grep UTR|wc -l|awk '{print \$1}'"

	cmd_novel_CDS_UTR_plus="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep CDS|grep UTR|wc -l|awk '{print \$1}'"
	cmd_novel_CDS_UTR_minus="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep CDS|grep UTR|wc -l|awk '{print \$1}'"

	cmd_novel_Undefined_exon_plus="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep exon|grep -v CDS|grep -v UTR|wc -l|awk '{print \$1}'"
	cmd_novel_Undefined_exon_minus="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep exon|grep -v CDS|grep -v UTR|wc -l|awk '{print \$1}'"

	cmd_novel_intron_plus="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep -v exon|wc -l|awk '{print \$1}'"
	cmd_novel_intron_minus="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
	uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|grep -v exon|wc -l|awk '{print \$1}'"

    cmd_novel_intergenic_plus="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb -v|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
    uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|wc -l|awk '{print \$1}'"
    cmd_novel_intergenic_minus="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb -v|awk '{print \$1\"\\t\"\$2\"\\t\"\$15\"\\t\"\$14}'|\
    uniq|awk 'a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]!~\$4 {a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]=a[\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"]\",\"\$4} END {for(i in a) {print i,a[i]}}'|wc -l|awk '{print \$1}'"

 	eval "echo -e \"CDS=\"\$(echo \$(eval \$cmd_novel_CDS_plus)+\$(eval \$cmd_novel_CDS_minus)|bc)\"\\n\"\
	\"UTR=\"\$(echo \$(eval \$cmd_novel_UTR_plus)+\$(eval \$cmd_novel_UTR_minus)|bc)\"\\n\"\
	\"CDS_UTR=\"\$(echo \$(eval \$cmd_novel_CDS_UTR_plus)+\$(eval \$cmd_novel_CDS_UTR_minus)|bc)\"\\n\"\
	\"Undefined_exon=\"\$(echo \$(eval \$cmd_novel_Undefined_exon_plus)+\$(eval \$cmd_novel_Undefined_exon_minus)|bc)\"\\n\"\
	\"Intron=\"\$(echo \$(eval \$cmd_novel_intron_plus)+\$(eval \$cmd_novel_intron_minus)|bc)\"\\n\"\
    \"Intergenic=\"\$(echo \$(eval \$cmd_novel_intergenic_plus)+\$(eval \$cmd_novel_intergenic_minus)|bc)|sed 's/ //g'> "$path_Result"Intersection_gene_annotation_novel_TPM"$TPM".report"

    cmd_drawing_pie_chart_intersection_gene=$path_python3"python3 "$path_modules"drawing_pie_chart_intersection_gene.py --input "$path_Result"Intersection_gene_annotation_polymorphism_TPM"$TPM".report --output "$path_Result"Intersection_gene_annotation_polymorphism_TPM"$TPM".pdf"
    echo $cmd_drawing_pie_chart_intersection_gene > $path_current"drawing_"$USER$option_tag".sh"
	eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
	eval "source "$path_current"drawing_"$USER$option_tag".sh"

	while [ $(eval "ls "$path_Result"Intersection_gene_annotation_polymorphism_TPM"$TPM".report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
	while [ $(eval "ls "$path_Result"Intersection_gene_annotation_polymorphism_TPM"$TPM".pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"Intersection_gene_annotation_polymorphism_TPM"$TPM".report \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"Intersection_gene_annotation_polymorphism_TPM"$TPM".pdf \e[0;0m has been generated"

    cmd_drawing_pie_chart_intersection_gene=$path_python3"python3 "$path_modules"drawing_pie_chart_intersection_gene.py --input "$path_Result"Intersection_gene_annotation_novel_TPM"$TPM".report --output "$path_Result"Intersection_gene_annotation_novel_TPM"$TPM".pdf"
    echo $cmd_drawing_pie_chart_intersection_gene > $path_current"drawing_"$USER$option_tag".sh"
	eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
	eval "source "$path_current"drawing_"$USER$option_tag".sh"

	while [ $(eval "ls "$path_Result"Intersection_gene_annotation_novel_TPM"$TPM".report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
	while [ $(eval "ls "$path_Result"Intersection_gene_annotation_novel_TPM"$TPM".pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"Intersection_gene_annotation_novel_TPM"$TPM".report \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"Intersection_gene_annotation_novel_TPM"$TPM".pdf \e[0;0m has been generated"

    # caution: certain gene name inlude "CDS", so I did't use gene name column for calculation or didn't use "grep" command for list
    echo -e "#gene_name,gene_ID,region,"$MEI"_chr,postion,pooled depth,pooled unique reads,individuals,indiviuals(TPM cutoffed),each TPM(TPM cutoffed),each unique reads(TPM cutoffed)"> $path_Result"CDS_interected_polymorphism_TPM"$TPM".csv"

    cmd_polymorphism_CDS_plus_list="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|sed 's/,/|/g'|awk '\$14==\"CDS\"{print \$16\",\"\$15\",\"\$14\",\"\$1\",\"\$2\",\"\$4\",\"\$5\",\"\$6\",\"\$8\",\"\$9\",\"\$10}'|sed -r 's/\"||;//g'|uniq> "$path_Result"CDS_interected_polymorphism_TPM"$TPM".csv"
    cmd_polymorphism_CDS_minus_list="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|sed 's/,/|/g'|awk '\$14==\"CDS\"{print \$16\",\"\$15\",\"\$14\",\"\$1\",\"\$2\",\"\$4\",\"\$5\",\"\$6\",\"\$8\",\"\$9\",\"\$10}'|sed -r 's/\"||;//g'|uniq>> "$path_Result"CDS_interected_polymorphism_TPM"$TPM".csv"

    eval $cmd_polymorphism_CDS_plus_list
    eval $cmd_polymorphism_CDS_minus_list

    cmd_polymorphism_CDS_plus_bed="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|sed 's/,/|/g'|awk '\$14==\"CDS\"'|sed -r 's/\"||;//g'|uniq> "$path_output"CDS_interected_polymorphism_TPM"$TPM".bed"
    cmd_polymorphism_CDS_minus_bed="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|sed 's/,/|/g'|awk '\$14==\"CDS\"'|sed -r 's/\"||;//g'|uniq>> "$path_output"CDS_interected_polymorphism_TPM"$TPM".bed"

    eval $cmd_polymorphism_CDS_plus_bed
    eval $cmd_polymorphism_CDS_minus_bed

    while [ $(eval "ls "$path_Result"CDS_interected_polymorphism_TPM"$TPM".csv 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    while [ $(eval "ls "$path_output"CDS_interected_polymorphism_TPM"$TPM".bed 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"CDS_interected_polymorphism_TPM"$TPM".csv  \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_output"CDS_interected_polymorphism_TPM"$TPM".bed  \e[0;0m has been generated"
    echo -e "#gene_name,gene_ID,region,"$MEI"_chr,postion,pooled depth,pooled unique reads,individuals,indiviuals(TPM cutoffed),each TPM(TPM cutoffed),each unique reads(TPM cutoffed)"> $path_Result"CDS_interected_novel_TPM"$TPM".csv"

    cmd_novel_CDS_plus_list="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|sed 's/,/|/g'|awk '\$14==\"CDS\"{print \$16\",\"\$15\",\"\$14\",\"\$1\",\"\$2\",\"\$4\",\"\$5\",\"\$6\",\"\$8\",\"\$9\",\"\$10}'|sed -r 's/\"||;//g'|uniq> "$path_Result"CDS_interected_novel_TPM"$TPM".csv"
    cmd_novel_CDS_minus_list="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|sed 's/,/|/g'|awk '\$14==\"CDS\"{print \$16\",\"\$15\",\"\$14\",\"\$1\",\"\$2\",\"\$4\",\"\$5\",\"\$6\",\"\$8\",\"\$9\",\"\$10}'|sed -r 's/\"||;//g'|uniq>> "$path_Result"CDS_interected_novel_TPM"$TPM".csv"

    eval $cmd_novel_CDS_plus_list
    eval $cmd_novel_CDS_minus_list

    cmd_novel_CDS_plus_bed="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|sed 's/,/|/g'|awk '\$14==\"CDS\"'|sed -r 's/\"||;//g'|uniq> "$path_output"CDS_interected_novel_TPM"$TPM".bed"
    cmd_novel_CDS_minus_bed="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_gencode"gencode.v19.protein_coding.bed -wa -wb|sed 's/,/|/g'|awk '\$14==\"CDS\"'|sed -r 's/\"||;//g'|uniq>> "$path_output"CDS_interected_novel_TPM"$TPM".bed"

    eval $cmd_novel_CDS_plus_bed
    eval $cmd_novel_CDS_minus_bed

    while [ $(eval "ls "$path_Result"CDS_interected_novel_TPM"$TPM".csv 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    while [ $(eval "ls "$path_output"CDS_interected_novel_TPM"$TPM".bed 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"CDS_interected_novel_TPM"$TPM".csv  \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_output"CDS_interected_novel_TPM"$TPM".bed  \e[0;0m has been generated"


#>>>> Check_point_11 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "11" ]]; then


    cmd_showing_meanTPM="cat "$path_Result"sensitivity_stuff/tpm_stats_mean_median.txt"
    eval $cmd_showing_meanTPM

    echo "Input TPM cutoff for analyzing chromosome state from ENCODE data"
    read TPM

    cmd_mkdir_encode="mkdir "$path_Result"encode_stuff/ 2>/dev/null"
    eval $cmd_mkdir_encode

    rm_encode="rm "$path_Result"encode_stuff/* 2>/dev/null"
    eval $rm_encode 

    rm_polymorphism_encode_heatmap="rm "$path_Result"encode_heatmap_polymorphism_TPM"$TPM".pdf 2>/dev/null"
    rm_novel_encode_heatmap="rm "$path_Result"encode_heatmap_novel_TPM"$TPM".pdf 2>/dev/null"
    eval $rm_polymorphism_encode_heatmap
    eval $rm_novel_encode_heatmap

	file_1st_candidates_plus_TPMcutoff=$path_Result"encode_stuff/1st_candidates_plus."$MEI$option_tag"TPM"$TPM".temp"
	file_1st_candidates_minus_TPMcutoff=$path_Result"encode_stuff/1st_candidates_minus."$MEI$option_tag"TPM"$TPM".temp"
	file_polymorphism_plus_TPMcutoff=$path_Result"encode_stuff/Polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_minus_TPMcutoff=$path_Result"encode_stuff/Polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_novel_plus_TPMcutoff=$path_Result"encode_stuff/Novel_polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_novel_minus_TPMcutoff=$path_Result"encode_stuff/Novel_polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.temp"

	file_polymorphism_TPMcutoff=$path_Result"encode_stuff/Polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_novel_TPMcutoff=$path_Result"encode_stuff/Novel_polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.temp"

	rm_1st_candidates_plus_TPMcutoff="rm "$file_1st_candidates_plus_TPMcutoff" 2>/dev/null"
	rm_1st_candidates_minus_TPMcutoff="rm "$file_1st_candidates_minus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_plus_TPMcutoff="rm "$file_polymorphism_plus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_minus_TPMcutoff="rm "$file_polymorphism_minus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_novel_plus_TPMcutoff="rm "$file_polymorphism_novel_plus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_novel_minus_TPMcutoff="rm "$file_polymorphism_novel_minus_TPMcutoff" 2>/dev/null"

	eval $rm_1st_candidates_plus_TPMcutoff;eval $rm_1st_candidates_minus_TPMcutoff
    eval $rm_file_polymorphism_plus_TPMcutoff;eval $rm_file_polymorphism_minus_TPMcutoff
    eval $rm_file_polymorphism_novel_plus_TPMcutoff;eval $rm_file_polymorphism_novel_minus_TPMcutoff

	cmd_file_1st_candidates_plus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_plus" >"$file_1st_candidates_plus_TPMcutoff
	cmd_file_1st_candidates_minus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_minus" >"$file_1st_candidates_minus_TPMcutoff
	eval $cmd_file_1st_candidates_plus_TPMcutoff;eval $cmd_file_1st_candidates_minus_TPMcutoff

	cmd_polymorphism_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_plus_TPMcutoff
	cmd_polymorphism_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_minus_TPMcutoff
	eval $cmd_polymorphism_plus_TPMcutoff;eval $cmd_polymorphism_minus_TPMcutoff

	cmd_polymorphism_novel_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_plus_TPMcutoff
	cmd_polymorphism_novel_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin  -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_minus_TPMcutoff
	eval $cmd_polymorphism_novel_plus_TPMcutoff;eval $cmd_polymorphism_novel_minus_TPMcutoff



    cmd_polymorphism11="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmH1hescHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/H1hesc.p.polymorphism.temp"
    cmd_polymorphism12="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmH1hescHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/H1hesc.m.polymorphism.temp"
    cmd_polymorphism13="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/H1hesc.p.polymorphism.temp "$path_Result"encode_stuff/H1hesc.m.polymorphism.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/H1hesc.polymorphism.temp"

    cmd_polymorphism21="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmK562HMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/K562.p.polymorphism.temp"
    cmd_polymorphism22="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmK562HMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/K562.m.polymorphism.temp"
    cmd_polymorphism23="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/K562.p.polymorphism.temp "$path_Result"encode_stuff/K562.m.polymorphism.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/K562.polymorphism.temp"

    cmd_polymorphism31="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmGm12878HMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Gm12878.p.polymorphism.temp"
    cmd_polymorphism32="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmGm12878HMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Gm12878.m.polymorphism.temp"
    cmd_polymorphism33="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Gm12878.p.polymorphism.temp "$path_Result"encode_stuff/Gm12878.m.polymorphism.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Gm12878.polymorphism.temp"

    cmd_polymorphism41="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHepg2HMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hepg2.p.polymorphism.temp"
    cmd_polymorphism42="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHepg2HMM.bed  -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hepg2.m.polymorphism.temp"
    cmd_polymorphism43="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Hepg2.p.polymorphism.temp "$path_Result"encode_stuff/Hepg2.m.polymorphism.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Hepg2.polymorphism.temp"

    cmd_polymorphism51="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHuvecHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Huvec.p.polymorphism.temp"
    cmd_polymorphism52="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHuvecHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Huvec.m.polymorphism.temp"
    cmd_polymorphism53="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Huvec.p.polymorphism.temp "$path_Result"encode_stuff/Huvec.m.polymorphism.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Huvec.polymorphism.temp"

    cmd_polymorphism61="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHsmmHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hsmm.p.polymorphism.temp"
    cmd_polymorphism62="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHsmmHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hsmm.m.polymorphism.temp"
    cmd_polymorphism63="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Hsmm.p.polymorphism.temp "$path_Result"encode_stuff/Hsmm.m.polymorphism.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Hsmm.polymorphism.temp"

    cmd_polymorphism71="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmNhlfHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Nhlf.p.polymorphism.temp"
    cmd_polymorphism72="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmNhlfHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Nhlf.m.polymorphism.temp"
    cmd_polymorphism73="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Nhlf.p.polymorphism.temp "$path_Result"encode_stuff/Nhlf.m.polymorphism.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Nhlf.polymorphism.temp"

    cmd_polymorphism81="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmNhekHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Nhek.p.polymorphism.temp"
    cmd_polymorphism82="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmNhekHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Nhek.m.polymorphism.temp"
    cmd_polymorphism83="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Nhek.p.polymorphism.temp "$path_Result"encode_stuff/Nhek.m.polymorphism.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Nhek.polymorphism.temp"

    cmd_polymorphism91="intersectBed -a "$file_polymorphism_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHmecHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hmec.p.polymorphism.temp"
    cmd_polymorphism92="intersectBed -a "$file_polymorphism_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHmecHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hmec.m.polymorphism.temp"
    cmd_polymorphism93="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Hmec.p.polymorphism.temp "$path_Result"encode_stuff/Hmec.m.polymorphism.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Hmec.polymorphism.temp"

    cmd_polymorphismj="join -a1 -a2 "$path_ref_encode"Broad_ChromHMM/encode_array_state.txt "$path_Result"encode_stuff/H1hesc.polymorphism.temp|join -a1 -a2 -e'0' -o'0,1.2,2.2' - "$path_Result"encode_stuff/K562.polymorphism.temp|join -a1 -a2 -e'0' -o'0,1.2,1.3,2.2' - "$path_Result"encode_stuff/Gm12878.polymorphism.temp|join  -a1 -a2 -e'0' -o'0,1.2,1.3,1.4,2.2' - "$path_Result"encode_stuff/Hepg2.polymorphism.temp|join -a1 -a2 -e'0' -o'0,1.2,1.3,1.4,1.5,2.2' - "$path_Result"encode_stuff/Huvec.polymorphism.temp|join -a1 -a2 -e'0' -o'0,1.2,1.3,1.4,1.5,1.6,2.2' - "$path_Result"encode_stuff/Hsmm.polymorphism.temp|join -a1 -a2 -e'0' -o'0,1.2,1.3,1.4,1.5,1.6,1.7,2.2' - "$path_Result"encode_stuff/Nhlf.polymorphism.temp|join -a1 -a2 -e'0' -o'0,1.2,1.3,1.4,1.5,1.6,1.7,1.8,2.2' - "$path_Result"encode_stuff/Nhek.polymorphism.temp|join -a1 -a2 -e'0' -o'0,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.2' - "$path_Result"encode_stuff/Hmec.polymorphism.temp|sort -T "$path_sort_temporary_directory" -k1n > "$path_Result"encode_array_num_polymorphism.temp"

    eval $cmd_polymorphism11; eval $cmd_polymorphism12; eval $cmd_polymorphism13
    eval $cmd_polymorphism21; eval $cmd_polymorphism22; eval $cmd_polymorphism23
    eval $cmd_polymorphism31; eval $cmd_polymorphism32; eval $cmd_polymorphism33
    eval $cmd_polymorphism41; eval $cmd_polymorphism42; eval $cmd_polymorphism43
    eval $cmd_polymorphism51; eval $cmd_polymorphism52; eval $cmd_polymorphism53
    eval $cmd_polymorphism61; eval $cmd_polymorphism62; eval $cmd_polymorphism63
    eval $cmd_polymorphism71; eval $cmd_polymorphism72; eval $cmd_polymorphism73
    eval $cmd_polymorphism81; eval $cmd_polymorphism82; eval $cmd_polymorphism83
    eval $cmd_polymorphism91; eval $cmd_polymorphism92; eval $cmd_polymorphism93
    eval $cmd_polymorphismj

    cmd_novel11="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmH1hescHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/H1hesc.p.novel.temp"
    cmd_novel12="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmH1hescHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/H1hesc.m.novel.temp"
    cmd_novel13="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/H1hesc.p.novel.temp "$path_Result"encode_stuff/H1hesc.m.novel.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/H1hesc.novel.temp"

    cmd_novel21="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmK562HMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/K562.p.novel.temp"
    cmd_novel22="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmK562HMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/K562.m.novel.temp"
    cmd_novel23="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/K562.p.novel.temp "$path_Result"encode_stuff/K562.m.novel.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/K562.novel.temp"

    cmd_novel31="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmGm12878HMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Gm12878.p.novel.temp"
    cmd_novel32="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmGm12878HMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Gm12878.m.novel.temp"
    cmd_novel33="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Gm12878.p.novel.temp "$path_Result"encode_stuff/Gm12878.m.novel.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Gm12878.novel.temp"

    cmd_novel41="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHepg2HMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hepg2.p.novel.temp"
    cmd_novel42="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHepg2HMM.bed  -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hepg2.m.novel.temp"
    cmd_novel43="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Hepg2.p.novel.temp "$path_Result"encode_stuff/Hepg2.m.novel.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Hepg2.novel.temp"

    cmd_novel51="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHuvecHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Huvec.p.novel.temp"
    cmd_novel52="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHuvecHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Huvec.m.novel.temp"
    cmd_novel53="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Huvec.p.novel.temp "$path_Result"encode_stuff/Huvec.m.novel.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Huvec.novel.temp"

    cmd_novel61="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHsmmHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hsmm.p.novel.temp"
    cmd_novel62="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHsmmHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hsmm.m.novel.temp"
    cmd_novel63="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Hsmm.p.novel.temp "$path_Result"encode_stuff/Hsmm.m.novel.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Hsmm.novel.temp"

    cmd_novel71="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmNhlfHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Nhlf.p.novel.temp"
    cmd_novel72="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmNhlfHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Nhlf.m.novel.temp"
    cmd_novel73="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Nhlf.p.novel.temp "$path_Result"encode_stuff/Nhlf.m.novel.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Nhlf.novel.temp"

    cmd_novel81="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmNhekHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Nhek.p.novel.temp"
    cmd_novel82="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmNhekHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Nhek.m.novel.temp"
    cmd_novel83="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Nhek.p.novel.temp "$path_Result"encode_stuff/Nhek.m.novel.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Nhek.novel.temp"

    cmd_novel91="intersectBed -a "$file_polymorphism_novel_plus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHmecHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hmec.p.novel.temp"
    cmd_novel92="intersectBed -a "$file_polymorphism_novel_minus_TPMcutoff" -b "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHmecHMM.bed -wa -wb|awk '{print \$14}'|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hmec.m.novel.temp"
    cmd_novel93="join -a1 -a2 -e'0' -o'0,1.2,2.2' "$path_Result"encode_stuff/Hmec.p.novel.temp "$path_Result"encode_stuff/Hmec.m.novel.temp |awk '{print \$1\"\\t\"\$2+\$3}'> "$path_Result"encode_stuff/Hmec.novel.temp"

    cmd_novelj="join -a1 -a2 "$path_ref_encode"Broad_ChromHMM/encode_array_state.txt "$path_Result"encode_stuff/H1hesc.novel.temp|join -a1 -a2 -e'0' -o'0,1.2,2.2' - "$path_Result"encode_stuff/K562.novel.temp|join -a1 -a2 -e'0' -o'0,1.2,1.3,2.2' - "$path_Result"encode_stuff/Gm12878.novel.temp|join  -a1 -a2 -e'0' -o'0,1.2,1.3,1.4,2.2' - "$path_Result"encode_stuff/Hepg2.novel.temp|join -a1 -a2 -e'0' -o'0,1.2,1.3,1.4,1.5,2.2' - "$path_Result"encode_stuff/Huvec.novel.temp|join -a1 -a2 -e'0' -o'0,1.2,1.3,1.4,1.5,1.6,2.2' - "$path_Result"encode_stuff/Hsmm.novel.temp|join -a1 -a2 -e'0' -o'0,1.2,1.3,1.4,1.5,1.6,1.7,2.2' - "$path_Result"encode_stuff/Nhlf.novel.temp|join -a1 -a2 -e'0' -o'0,1.2,1.3,1.4,1.5,1.6,1.7,1.8,2.2' - "$path_Result"encode_stuff/Nhek.novel.temp|join -a1 -a2 -e'0' -o'0,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.2' - "$path_Result"encode_stuff/Hmec.novel.temp|sort -T "$path_sort_temporary_directory" -k1n > "$path_Result"encode_array_num_novel.temp"

    eval $cmd_novel11; eval $cmd_novel12; eval $cmd_novel13
    eval $cmd_novel21; eval $cmd_novel22; eval $cmd_novel23
    eval $cmd_novel31; eval $cmd_novel32; eval $cmd_novel33
    eval $cmd_novel41; eval $cmd_novel42; eval $cmd_novel43
    eval $cmd_novel51; eval $cmd_novel52; eval $cmd_novel53
    eval $cmd_novel61; eval $cmd_novel62; eval $cmd_novel63
    eval $cmd_novel71; eval $cmd_novel72; eval $cmd_novel73
    eval $cmd_novel81; eval $cmd_novel82; eval $cmd_novel83
    eval $cmd_novel91; eval $cmd_novel92; eval $cmd_novel93
    eval $cmd_novelj

#########

	cmd1t="cat "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmH1hescHMM.bed|cut -f4|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/H1hesc.t.temp"
	cmd2t="cat "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmK562HMM.bed|cut -f4|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/K562.t.temp"
	cmd3t="cat "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmGm12878HMM.bed|cut -f4|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Gm12878.t.temp"
	cmd4t="cat "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHepg2HMM.bed|cut -f4|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hepg2.t.temp"
	cmd5t="cat "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHuvecHMM.bed|cut -f4|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Huvec.t.temp"
	cmd6t="cat "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHsmmHMM.bed|cut -f4|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1  > "$path_Result"encode_stuff/Hsmm.t.temp"
	cmd7t="cat "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmNhlfHMM.bed|cut -f4|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Nhlf.t.temp"
	cmd8t="cat "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmNhekHMM.bed|cut -f4|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Nhek.t.temp"
	cmd9t="cat "$path_ref_encode"Broad_ChromHMM/wgEncodeBroadHmmHmecHMM.bed|cut -f4|sort -T "$path_sort_temporary_directory" -k1n|uniq -c|awk '{print \$2\"\\t\"\$1}'|sort -T "$path_sort_temporary_directory" -k 1b,1 > "$path_Result"encode_stuff/Hmec.t.temp"

	cmdjt="join "$path_Result"encode_stuff/H1hesc.t.temp "$path_Result"encode_stuff/K562.t.temp|join - "$path_Result"encode_stuff/Gm12878.t.temp|join - "$path_Result"encode_stuff/Hepg2.t.temp|join - "$path_Result"encode_stuff/Huvec.t.temp|join - "$path_Result"encode_stuff/Hsmm.t.temp|join - "$path_Result"encode_stuff/Nhlf.t.temp|join - "$path_Result"encode_stuff/Nhek.t.temp|join - "$path_Result"encode_stuff/Hmec.t.temp|sort -T "$path_sort_temporary_directory" -k1n >"$path_Result"encode_array_total.temp"

	eval $cmd1t;eval $cmd2t;eval $cmd3t;eval $cmd4t;eval $cmd5t;eval $cmd6t;eval $cmd7t;eval $cmd8t;eval $cmd9t;eval $cmdjt

#########

    cmd_drawing_heatmap=$path_python3"python3 "$path_modules"drawing_heatmap_encode_chromHMM.py --input_num "$path_Result"encode_array_num_polymorphism.temp --input_total "$path_Result"encode_array_total.temp --output "$path_Result"encode_heatmap_polymorphism_TPM"$TPM".pdf"
    echo $cmd_drawing_heatmap > $path_current"drawing_"$USER$option_tag".sh"

    cmd_drawing_heatmap=$path_python3"python3 "$path_modules"drawing_heatmap_encode_chromHMM.py --input_num "$path_Result"encode_array_num_novel.temp --input_total "$path_Result"encode_array_total.temp --output "$path_Result"encode_heatmap_novel_TPM"$TPM".pdf"
    echo $cmd_drawing_heatmap >> $path_current"drawing_"$USER$option_tag".sh"
 	eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
	eval "source "$path_current"drawing_"$USER$option_tag".sh"

	while [ $(eval "ls "$path_Result"encode_heatmap_polymorphism_TPM"$TPM".pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"encode_heatmap_polymorphism_TPM"$TPM".pdf \e[0;0m has been generated"

	while [ $(eval "ls "$path_Result"encode_heatmap_novel_TPM"$TPM".pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"encode_heatmap_novel_TPM"$TPM".pdf \e[0;0m has been generated"


#>>>> Check_point_12 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "12" ]]; then

# De Novo insertion= child(>TPMcutoff) - both_parents (>TPMcutoff) - paternal (>TPMcutoff) - maternal(>TPMcutoff)- Background1 -Background2
# Background1 = found in children (>TPMcutoff) and other genetically unrelated people (>TPMcutoff), not their parents (>TPMcutoff)
# Background2 = found in other people including their parents (without TPM cutoff)

    rm_sample_temp="rm "$path_current"samples_"$USER".temp 2>/dev/null"
    eval $rm_sample_temp

    cmd_mkdir_stuff="mkdir "$path_Result"de_novo_stuff/ 2>/dev/null"
    eval $cmd_mkdir_stuff

    rm_de_novo="rm "$path_Result"de_novo_stuff/* 2>/dev/null"
    eval $rm_de_novo 

    for i in $(seq $number_lib)
	    do    
	    each_lib=${arr_lib[$i-1]}
	    echo $each_lib >> $path_current"samples_"$USER".temp"
	    done
    cmd_sort_sample="cat "$path_current"samples_"$USER".temp|sort -T "$path_sort_temporary_directory" -k 1b,1 >"$path_current"samples_"$USER".list"
    eval $cmd_sort_sample  

    cmd_showing_meanTPM="cat "$path_Result"sensitivity_stuff/tpm_stats_mean_median.txt"
    eval $cmd_showing_meanTPM

    echo "Input TPM cutoff :"
    read TPM

	rm_de_novo_with_unique_mapping_histogram="rm "$path_Result"de_novo_with_unique_mapping_histogram_"$MEI$option_tag"TPM"$TPM".pdf 2>/dev/null"
	eval $rm_de_novo_with_unique_mapping_histogram

    rm_polymorphism_de_novo_heatmap="rm "$path_Result"de_novo_heatmap_polymorphism_TPM"$TPM".pdf 2>/dev/null"
    rm_novel_de_novo_heatmap="rm "$path_Result"de_novo_heatmap_novel_TPM"$TPM".pdf 2>/dev/null"
    eval $rm_polymorphism_de_novo_heatmap
    eval $rm_novel_de_novo_heatmap

	file_1st_candidates_plus_TPMcutoff=$path_Result"de_novo_stuff/1st_candidates_plus."$MEI$option_tag"TPM"$TPM".temp"
	file_1st_candidates_minus_TPMcutoff=$path_Result"de_novo_stuff/1st_candidates_minus."$MEI$option_tag"TPM"$TPM".temp"
	file_polymorphism_plus_TPMcutoff=$path_Result"de_novo_stuff/Polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_minus_TPMcutoff=$path_Result"de_novo_stuff/Polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_novel_plus_TPMcutoff=$path_Result"de_novo_stuff/Novel_polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_novel_minus_TPMcutoff=$path_Result"de_novo_stuff/Novel_polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.temp"

	file_polymorphism_TPMcutoff=$path_Result"de_novo_stuff/Polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.temp"
	file_polymorphism_novel_TPMcutoff=$path_Result"de_novo_stuff/Novel_polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.temp"

	rm_1st_candidates_plus_TPMcutoff="rm "$file_1st_candidates_plus_TPMcutoff" 2>/dev/null"
	rm_1st_candidates_minus_TPMcutoff="rm "$file_1st_candidates_minus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_plus_TPMcutoff="rm "$file_polymorphism_plus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_minus_TPMcutoff="rm "$file_polymorphism_minus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_novel_plus_TPMcutoff="rm "$file_polymorphism_novel_plus_TPMcutoff" 2>/dev/null"
	rm_file_polymorphism_novel_minus_TPMcutoff="rm "$file_polymorphism_novel_minus_TPMcutoff" 2>/dev/null"
	eval $rm_1st_candidates_plus_TPMcutoff;eval $rm_1st_candidates_minus_TPMcutoff
    eval $rm_file_polymorphism_plus_TPMcutoff;eval $rm_file_polymorphism_minus_TPMcutoff
    eval $rm_file_polymorphism_novel_plus_TPMcutoff;eval $rm_file_polymorphism_novel_minus_TPMcutoff

	cmd_file_1st_candidates_plus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_plus" >"$file_1st_candidates_plus_TPMcutoff
	cmd_file_1st_candidates_minus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_minus" >"$file_1st_candidates_minus_TPMcutoff
	eval $cmd_file_1st_candidates_plus_TPMcutoff;eval $cmd_file_1st_candidates_minus_TPMcutoff

	cmd_polymorphism_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_plus_TPMcutoff
	cmd_polymorphism_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_minus_TPMcutoff
	eval $cmd_polymorphism_plus_TPMcutoff;eval $cmd_polymorphism_minus_TPMcutoff

	cmd_polymorphism_novel_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_plus_TPMcutoff
	cmd_polymorphism_novel_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin  -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_minus_TPMcutoff
	eval $cmd_polymorphism_novel_plus_TPMcutoff;eval $cmd_polymorphism_novel_minus_TPMcutoff

	cmd_pre_input_de_novo="cat "$path_mescan"example_family_list/family_list.ped|awk '\$3!=0&&\$4!=0 {print \$2\" \"\$3\" \"\$4}'|sort -T "$path_sort_temporary_directory" -k 1b,1  >"$path_Result"pre_input_de_novo.txt"
    eval $cmd_pre_input_de_novo
    cmd_input_de_novo="join "$path_current"samples_"$USER".list "$path_Result"pre_input_de_novo.txt >"$path_Result"input_de_novo.txt"
    eval $cmd_input_de_novo

	echo "-,Parents inheritance, Paternal inheritance, Maternal inheritance, Child only but found in background1, Child only but found in background2, De novo" >$path_Result"de_novo_polymorphism_TPM"$TPM".csv"
	echo "-,Parents inheritance, Paternal inheritance, Maternal inheritance, Child only but found in background1, Child only but found in background2, De novo" >$path_Result"de_novo_novel_TPM"$TPM".csv"
	
	file_de_novo_polymorphism_temp=$path_output"de_novo_from_polymorphism_"$MEI$option_tag"TPM"$TPM".temp"
    file_de_novo_polymorphism=$path_output"de_novo_from_polymorphism_"$MEI$option_tag"TPM"$TPM".bed"

    rm_de_novo_polymorphism_temp="rm "$file_de_novo_polymorphism_temp" 2>/dev/null"
    eval $rm_de_novo_polymorphism_temp
    rm_de_novo_polymorphism="rm "$file_de_novo_polymorphism" 2>/dev/null"
    eval $rm_de_novo_polymorphism
	while read CMD 
		do
		eval "a=("$CMD")"
		P=${a[1]}
		M=${a[2]}
		O=${a[0]}

		cmd_shared="cat "$file_polymorphism_TPMcutoff"|awk '\$8~\""$O"\" && \$8~\""$P"\" && \$8~\""$M"\" '|wc -l"
		cmd_paternal="cat "$file_polymorphism_TPMcutoff"|awk '\$8~\""$O"\" && \$8~\""$P"\" && \$8!~\""$M"\" '|wc -l"
		cmd_maternal="cat "$file_polymorphism_TPMcutoff"|awk '\$8~\""$O"\" && \$8!~\""$P"\" && \$8~\""$M"\" '|wc -l"
		cmd_child_only_but_found_background1="cat "$file_polymorphism_TPMcutoff"|awk '\$8~\",\" && \$8~\""$O"\" && \$8!~\""$P"\" && \$8!~\""$M"\" '|wc -l"
		cmd_child_only_but_found_background2="cat "$file_polymorphism_TPMcutoff"|awk '\$8!~\",\" && \$8~\""$O"\" && \$6~\",\"'|wc -l"
		cmd_de_novo="cat "$file_polymorphism_TPMcutoff"|awk '\$8!~\",\" && \$8~\""$O"\" && \$6!~\",\"'|wc -l"

		cmd_de_novo_polymorphism_file_temp="cat "$file_polymorphism_TPMcutoff"|awk '\$8!~\",\" && \$8~\""$O"\" && \$6!~\",\"' >> "$file_de_novo_polymorphism_temp
		eval $cmd_de_novo_polymorphism_file_temp

		echo -e $O","$(eval $cmd_shared)","$(eval $cmd_paternal)","$(eval $cmd_maternal)","$(eval $cmd_child_only_but_found_background1)","$(eval $cmd_child_only_but_found_background2)","$(eval $cmd_de_novo) >> $path_Result"de_novo_polymorphism_TPM"$TPM".csv"

		done < $path_Result"input_de_novo.txt"

		cmd_de_novo_polymorphism_file="sort "$file_de_novo_polymorphism_temp"|uniq >"$file_de_novo_polymorphism
		eval $cmd_de_novo_polymorphism_file

    file_de_novo_novel_temp=$path_output"de_novo_from_novel_"$MEI$option_tag"TPM"$TPM".temp"
    file_de_novo_novel=$path_output"de_novo_from_novel_"$MEI$option_tag"TPM"$TPM".bed"
    rm_de_novo_novel_temp="rm "$file_de_novo_novel_temp" 2>/dev/null"
    eval $rm_de_novo_novel_temp  
    rm_de_novo_novel="rm "$file_de_novo_novel" 2>/dev/null"
    eval $rm_de_novo_novel
	while read CMD 
		do
		eval "a=("$CMD")"
		P=${a[1]}
		M=${a[2]}
		O=${a[0]}

		cmd_shared="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8~\""$O"\" && \$8~\""$P"\" && \$8~\""$M"\" '|wc -l"
		cmd_paternal="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8~\""$O"\" && \$8~\""$P"\" && \$8!~\""$M"\" '|wc -l"
		cmd_maternal="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8~\""$O"\" && \$8!~\""$P"\" && \$8~\""$M"\" '|wc -l"
		cmd_child_only_but_found_background1="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8~\",\" && \$8~\""$O"\" && \$8!~\""$P"\" && \$8!~\""$M"\" '|wc -l"
		cmd_child_only_but_found_background2="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8!~\",\" && \$8~\""$O"\" && \$6~\",\"'|wc -l"
		cmd_de_novo="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8!~\",\" && \$8~\""$O"\" && \$6!~\",\"'|wc -l"

		cmd_de_novo_novel_file_temp="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8!~\",\" && \$8~\""$O"\" && \$6!~\",\"' >> "$file_de_novo_novel_temp
		eval $cmd_de_novo_novel_file_temp

		echo -e $O","$(eval $cmd_shared)","$(eval $cmd_paternal)","$(eval $cmd_maternal)","$(eval $cmd_child_only_but_found_background1)","$(eval $cmd_child_only_but_found_background2)","$(eval $cmd_de_novo) >> $path_Result"de_novo_novel_TPM"$TPM".csv"

		done < $path_Result"input_de_novo.txt"

		cmd_de_novo_novel_file="sort "$file_de_novo_novel_temp"|uniq >"$file_de_novo_novel
		eval $cmd_de_novo_novel_file

	while [ $(eval "ls "$file_de_novo_polymorphism" 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
	while [ $(eval "ls "$file_de_novo_novel" 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$file_de_novo_polymorphism" \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$file_de_novo_novel" \e[0;0m has been generated"

    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"de_novo_polymorphism_TPM"$TPM".csv \e[0;0m has been generated"
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"de_novo_novel_TPM"$TPM".csv \e[0;0m has been generated"

#>>>> Check_point_13 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

	elif [[ $input_BB == "13" ]]; then

    rm_sample_temp="rm "$path_current"samples_"$USER".temp 2>/dev/null"
    eval $rm_sample_temp

    for i in $(seq $number_lib)
	    do    
	    each_lib=${arr_lib[$i-1]}
	    echo $each_lib >> $path_current"samples_"$USER".temp"
	    done

    cmd_sort_sample="cat "$path_current"samples_"$USER".temp|sort -T "$path_sort_temporary_directory" -k 1b,1 >"$path_current"samples_"$USER".list"
    eval $cmd_sort_sample  

    cmd_showing_meanTPM="cat "$path_Result"sensitivity_stuff/tpm_stats_mean_median.txt"
    eval $cmd_showing_meanTPM

	echo "Input the range of TPM cutoff (input format:min max interval) (example:0 10 0.1):"
	read min max interval

    cmd_mkdir_stuff="mkdir "$path_Result"de_novo_stuff/ 2>/dev/null"
    eval $cmd_mkdir_stuff

	rm_TPM_de_novo="rm "$path_Result"TPM"$min"-"$max"-"$interval"_de_novo*.report 2>/dev/null"
	eval $rm_TPM_de_novo

	rm_TPM_de_novo_PDF="rm TPM "$path_Result"TPM"$min"-"$max"-"$interval"_de_novo*.pdf 2>/dev/null"
	eval $rm_TPM_de_novo_PDF

	i=$min

	while [[ 1 -eq "$(echo "$i <= $max" | bc)" ]]; do

		TPM=$i
		
		file_1st_candidates_plus_TPMcutoff=$path_Result"de_novo_stuff/1st_candidates_plus."$MEI$option_tag"TPM"$TPM".temp"
		file_1st_candidates_minus_TPMcutoff=$path_Result"de_novo_stuff/1st_candidates_minus."$MEI$option_tag"TPM"$TPM".temp"
		file_polymorphism_plus_TPMcutoff=$path_Result"de_novo_stuff/Polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.temp"
		file_polymorphism_minus_TPMcutoff=$path_Result"de_novo_stuff/Polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.temp"
		file_polymorphism_novel_plus_TPMcutoff=$path_Result"de_novo_stuff/Novel_polymorphic_insertion_plus."$MEI$option_tag"TPM"$TPM".BB.temp"
		file_polymorphism_novel_minus_TPMcutoff=$path_Result"de_novo_stuff/Novel_polymorphic_insertion_minus."$MEI$option_tag"TPM"$TPM".BB.temp"

		file_polymorphism_TPMcutoff=$path_Result"de_novo_stuff/Polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.temp"
		file_polymorphism_novel_TPMcutoff=$path_Result"de_novo_stuff/Novel_polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.temp"

		rm_1st_candidates_plus_TPMcutoff="rm "$file_1st_candidates_plus_TPMcutoff" 2>/dev/null"
		rm_1st_candidates_minus_TPMcutoff="rm "$file_1st_candidates_minus_TPMcutoff" 2>/dev/null"
		rm_file_polymorphism_plus_TPMcutoff="rm "$file_polymorphism_plus_TPMcutoff" 2>/dev/null"
		rm_file_polymorphism_minus_TPMcutoff="rm "$file_polymorphism_minus_TPMcutoff" 2>/dev/null"
		rm_file_polymorphism_novel_plus_TPMcutoff="rm "$file_polymorphism_novel_plus_TPMcutoff" 2>/dev/null"
		rm_file_polymorphism_novel_minus_TPMcutoff="rm "$file_polymorphism_novel_minus_TPMcutoff" 2>/dev/null"

		eval $rm_1st_candidates_plus_TPMcutoff;eval $rm_1st_candidates_minus_TPMcutoff
		eval $rm_file_polymorphism_plus_TPMcutoff;eval $rm_file_polymorphism_minus_TPMcutoff
	    eval $rm_file_polymorphism_novel_plus_TPMcutoff;eval $rm_file_polymorphism_novel_minus_TPMcutoff

		cmd_file_1st_candidates_plus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_plus" >"$file_1st_candidates_plus_TPMcutoff
		cmd_file_1st_candidates_minus_TPMcutoff="awk '\$5>="$TPM"' "$file_1st_candidates_minus" >"$file_1st_candidates_minus_TPMcutoff
		eval $cmd_file_1st_candidates_plus_TPMcutoff;eval $cmd_file_1st_candidates_minus_TPMcutoff

		cmd_polymorphism_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_plus_TPMcutoff
		cmd_polymorphism_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_minus_TPMcutoff
		eval $cmd_polymorphism_plus_TPMcutoff;eval $cmd_polymorphism_minus_TPMcutoff

		cmd_polymorphism_novel_plus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_plus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_plus_TPMcutoff
		cmd_polymorphism_novel_minus_TPMcutoff="join -1 7 -2 7 <(sort -k7 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k7 "$file_1st_candidates_minus_TPMcutoff")|awk '{print \$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7\"\\t\"\$1\"\\t\"\$11\"\\t\"\$12\"\\t\"\$13}'|windowBed -a stdin  -b "$path_ref_mescan_customized"cutoff_Reference_"$MEI"_blastn-short"$option_tag"bed -w "$window_size" -v|windowBed -a stdin -b "$path_ref_mescan_customized"lifted_"$MEI"_journal.pgen.1002236.s019.entire_ins.bed -w "$window_size" -v |windowBed -a stdin -b "$path_ref_mescan_customized$MEI"_ALL.wgs.integrated_sv_map_v2.20130502.svs.genotypes."$MEI".entire_ins.bed -w "$window_size" -v  |windowBed -a stdin -b "$path_output$MEI"_additional_filter_RepeatMasker."$MEI$option_tag"temp -w "$window_size" -v |awk 'NF>1{bedfile[\$7]=\$1\"\\t\"\$2\"\\t\"\$3\"\\t\"\$4\"\\t\"\$5\"\\t\"\$6\"\\t\"\$7; indiviudal_cutoff[\$7]=indiviudal_cutoff[\$7]\",\"\$8; tpm[\$7] = tpm[\$7]\",\"\$9; unique[\$7] = unique[\$7]\",\"\$10} END{for(i in bedfile){print bedfile[i]\"\\t\"indiviudal_cutoff[i]\"\\t\"tpm[i]\"\\t\"unique[i]}}' |sed -r 's/\t,/\t/g'|sort -T "$path_sort_temporary_directory" -k7n >"$file_polymorphism_novel_minus_TPMcutoff
		eval $cmd_polymorphism_novel_plus_TPMcutoff;eval $cmd_polymorphism_novel_minus_TPMcutoff

		cmd_pre_input_de_novo="cat "$path_mescan"example_family_list/family_list.ped|awk '\$3!=0&&\$4!=0 {print \$2\" \"\$3\" \"\$4}'|sort -T "$path_sort_temporary_directory" -k 1b,1  >"$path_Result"pre_input_de_novo.txt"
	    eval $cmd_pre_input_de_novo
	    cmd_input_de_novo="join "$path_current"samples_"$USER".list "$path_Result"pre_input_de_novo.txt >"$path_Result"input_de_novo.txt"
	    eval $cmd_input_de_novo

    while read CMD 
        do
        eval "a=("$CMD")"
        P=${a[1]}
        M=${a[2]}
        O=${a[0]}

        cmd_shared="cat "$file_polymorphism_TPMcutoff"|awk '\$8~\""$O"\" && \$8~\""$P"\" && \$8~\""$M"\" '|wc -l"
        cmd_paternal="cat "$file_polymorphism_TPMcutoff"|awk '\$8~\""$O"\" && \$8~\""$P"\" && \$8!~\""$M"\" '|wc -l"
        cmd_maternal="cat "$file_polymorphism_TPMcutoff"|awk '\$8~\""$O"\" && \$8!~\""$P"\" && \$8~\""$M"\" '|wc -l"
        cmd_child_only_but_found_background1="cat "$file_polymorphism_TPMcutoff"|awk '\$8~\",\" && \$8~\""$O"\" && \$8!~\""$P"\" && \$8!~\""$M"\" '|wc -l"
        cmd_child_only_but_found_background2="cat "$file_polymorphism_TPMcutoff"|awk '\$8!~\",\" && \$8~\""$O"\" && \$6~\",\"'|wc -l"
        cmd_de_novo="cat "$file_polymorphism_TPMcutoff"|awk '\$8!~\",\" && \$8~\""$O"\" && \$6!~\",\"'|wc -l"

		echo -e $O"\t"$TPM"\t"$(eval $cmd_de_novo) >> $path_Result"TPM"$min"-"$max"-"$interval"_de_novo_polymorphism.report"

		done < $path_Result"input_de_novo.txt"

    while read CMD 
        do
        eval "a=("$CMD")"
        P=${a[1]}
        M=${a[2]}
        O=${a[0]}

        cmd_shared="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8~\""$O"\" && \$8~\""$P"\" && \$8~\""$M"\" '|wc -l"
        cmd_paternal="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8~\""$O"\" && \$8~\""$P"\" && \$8!~\""$M"\" '|wc -l"
        cmd_maternal="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8~\""$O"\" && \$8!~\""$P"\" && \$8~\""$M"\" '|wc -l"
        cmd_child_only_but_found_background1="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8~\",\" && \$8~\""$O"\" && \$8!~\""$P"\" && \$8!~\""$M"\" '|wc -l"
        cmd_child_only_but_found_background2="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8!~\",\" && \$8~\""$O"\" && \$6~\",\"'|wc -l"
        cmd_de_novo="cat "$file_polymorphism_novel_TPMcutoff"|awk '\$8!~\",\" && \$8~\""$O"\" && \$6!~\",\"'|wc -l"

		echo -e $O"\t"$TPM"\t"$(eval $cmd_de_novo) >> $path_Result"TPM"$min"-"$max"-"$interval"_de_novo_novel.report"

		done < $path_Result"input_de_novo.txt"

	 	i=$(echo $i+$interval|bc -l)
	done

    cmd_drawing_de_novo_by_TPM=$path_python3"python3 "$path_modules"drawing_de_novo_by_TPM.py --input_file "$path_Result"TPM"$min"-"$max"-"$interval"_de_novo_polymorphism.report --output "$path_Result"TPM"$min"-"$max"-"$interval"_de_novo_polymorphism.pdf"
    echo $cmd_drawing_de_novo_by_TPM > $path_current"drawing_"$USER$option_tag".sh"

    cmd_drawing_de_novo_by_TPM=$path_python3"python3 "$path_modules"drawing_de_novo_by_TPM.py --input_file "$path_Result"TPM"$min"-"$max"-"$interval"_de_novo_novel.report --output "$path_Result"TPM"$min"-"$max"-"$interval"_de_novo_novel.pdf"
    echo $cmd_drawing_de_novo_by_TPM >> $path_current"drawing_"$USER$option_tag".sh"
    eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
    eval "source "$path_current"drawing_"$USER$option_tag".sh"

	while [ $(eval "ls "$path_Result"TPM"$min"-"$max"-"$interval"_de_novo_polymorphism.pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
	while [ $(eval "ls "$path_Result"TPM"$min"-"$max"-"$interval"_de_novo_novel.pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
	echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"TPM"$min"-"$max"-"$interval"_de_novo_polymorphism.pdf \e[0;0m has been generated"
	echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"TPM"$min"-"$max"-"$interval"_de_novo_novel.pdf \e[0;0m has been generated"

#>>>> Check_point_14 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "14" ]]; then
    echo "In this step, those codes use premade bed files in previous steps"

    cmd_showing_meanTPM="cat "$path_Result"sensitivity_stuff/tpm_stats_mean_median.txt"
    eval $cmd_showing_meanTPM

    echo "Input TPM cutoff :"
    read TPM

	file_polymorphism_TPMcutoff=$path_output"Polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.bed"
	file_polymorphism_novel_TPMcutoff=$path_output"Novel_polymorphic_insertion_*."$MEI$option_tag"TPM"$TPM".BB.bed"
 	file_de_novo_polymorphism=$path_output"de_novo_from_polymorphism_"$MEI$option_tag"TPM"$TPM".bed"
    file_de_novo_novel=$path_output"de_novo_from_novel_"$MEI$option_tag"TPM"$TPM".bed"

if [ $(eval "ls "$path_output$MEI"_all"$option_tag"BB.bed 2>/dev/null|wc -l") -gt 0 ]; then echo $path_output$MEI"_all"$option_tag"BB.bed is found"; else echo -e "\e[0;31m "$path_output$MEI"_all"$option_tag"BB.bed is  not found \e[0;0m";return; fi
if [ $(eval "ls "$file_polymorphism_TPMcutoff" 2>/dev/null|wc -l") -gt 0 ]; then echo $file_polymorphism_TPMcutoff" are found"; else echo -e "\e[0;31m "$file_polymorphism_TPMcutoff" are  not found \e[0;0m";return; fi
if [ $(eval "ls "$file_polymorphism_novel_TPMcutoff" 2>/dev/null|wc -l") -gt 0 ]; then echo $file_polymorphism_novel_TPMcutoff" are found"; else echo -e "\e[0;31m "$file_polymorphism_novel_TPMcutoff" are  not found \e[0;0m";return; fi
if [ $(eval "ls "$file_de_novo_polymorphism" 2>/dev/null|wc -l") -gt 0 ]; then echo $file_de_novo_polymorphism" is found"; else echo -e "\e[0;31m "$file_de_novo_polymorphism" is not found \e[0;0m";return; fi
if [ $(eval "ls "$file_de_novo_novel" 2>/dev/null|wc -l") -gt 0 ]; then echo $file_de_novo_novel" is found"; else echo -e "\e[0;31m "$file_de_novo_novel" is not found \e[0;0m";return; fi

    cmd_centromere_all="join  <(sort -k 1b,1 "$path_output$MEI"_all"$option_tag"BB.bed) <(sort -k 1b,1 "$path_ref_mescan"centromere_hg19.bed)|awk '\$8>\$2{print \$1\"\\t\"\$2-\$8} \$9<\$3{print \$1\"\\t\"\$3-\$9}'>"$path_Result"centromere_distance_all_"$MEI".TPM"$TPM".report"
    eval $cmd_centromere_all
    while [ $(eval "ls "$path_Result"centromere_distance_all_"$MEI".TPM"$TPM".report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    cmd_drawing_centromere_all=$path_python3"python3 "$path_modules"drawing_centromere_distance.py --input "$path_Result"centromere_distance_all_"$MEI".TPM"$TPM".report --output "$path_Result"centromere_distance_all_"$MEI".TPM"$TPM".pdf"
    echo $cmd_drawing_centromere_all > $path_current"drawing_"$USER$option_tag".sh"


#---------
    cmd_centromere_polymorphism="join  <(sort -k 1b,1 "$file_polymorphism_TPMcutoff") <(sort -k 1b,1 "$path_ref_mescan"centromere_hg19.bed)|awk '\$11>\$2{print \$1\"\\t\"\$2-\$11} \$12<\$3{print \$1\"\\t\"\$3-\$12}'>"$path_Result"centromere_distance_polymorphism_"$MEI".TPM"$TPM".report"
    eval $cmd_centromere_polymorphism
    while [ $(eval "ls "$path_Result"centromere_distance_polymorphism_"$MEI".TPM"$TPM".report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    cmd_drawing_centromere_polymorphism=$path_python3"python3 "$path_modules"drawing_centromere_distance.py --input "$path_Result"centromere_distance_polymorphism_"$MEI".TPM"$TPM".report --output "$path_Result"centromere_distance_polymorphism_"$MEI".TPM"$TPM".pdf"
    echo $cmd_drawing_centromere_polymorphism >> $path_current"drawing_"$USER$option_tag".sh" 
#---------
    cmd_centromere_novel="join  <(sort -k 1b,1 "$file_polymorphism_novel_TPMcutoff") <(sort -k 1b,1 "$path_ref_mescan"centromere_hg19.bed)|awk '\$11>\$2{print \$1\"\\t\"\$2-\$11} \$12<\$3{print \$1\"\\t\"\$3-\$12}'>"$path_Result"centromere_distance_novel_"$MEI".TPM"$TPM".report"
    eval $cmd_centromere_novel
    while [ $(eval "ls "$path_Result"centromere_distance_novel_"$MEI".TPM"$TPM".report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    cmd_drawing_centromere_novel=$path_python3"python3 "$path_modules"drawing_centromere_distance.py --input "$path_Result"centromere_distance_novel_"$MEI".TPM"$TPM".report --output "$path_Result"centromere_distance_novel_"$MEI".TPM"$TPM".pdf"
    echo $cmd_drawing_centromere_novel >> $path_current"drawing_"$USER$option_tag".sh" 
#---------
    cmd_centromere_de_novo_polymorphism="join  <(sort -k 1b,1 "$file_de_novo_polymorphism") <(sort -k 1b,1 "$path_ref_mescan"centromere_hg19.bed)|awk '\$11>\$2{print \$1\"\\t\"\$2-\$11} \$12<\$3{print \$1\"\\t\"\$3-\$12}'>"$path_Result"centromere_distance_de_novo_polymorphism_"$MEI".TPM"$TPM".report"
    eval $cmd_centromere_de_novo_polymorphism
    while [ $(eval "ls "$path_Result"centromere_distance_de_novo_polymorphism_"$MEI".TPM"$TPM".report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    cmd_drawing_centromere_de_novo_polymorphism=$path_python3"python3 "$path_modules"drawing_centromere_distance.py --input "$path_Result"centromere_distance_de_novo_polymorphism_"$MEI".TPM"$TPM".report --output "$path_Result"centromere_distance_de_novo_polymorphism_"$MEI".TPM"$TPM".pdf"
    echo $cmd_drawing_centromere_de_novo_polymorphism >> $path_current"drawing_"$USER$option_tag".sh"

#---------
    cmd_centromere_de_novo_novel="join  <(sort -k 1b,1 "$file_de_novo_novel") <(sort -k 1b,1 "$path_ref_mescan"centromere_hg19.bed)|awk '\$11>\$2{print \$1\"\\t\"\$2-\$11} \$12<\$3{print \$1\"\\t\"\$3-\$12}'>"$path_Result"centromere_distance_de_novo_novel_"$MEI".TPM"$TPM".report"
    eval $cmd_centromere_de_novo_novel
    while [ $(eval "ls "$path_Result"centromere_distance_de_novo_novel_"$MEI".TPM"$TPM".report 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done

    cmd_drawing_centromere_de_novo_novel=$path_python3"python3 "$path_modules"drawing_centromere_distance.py --input "$path_Result"centromere_distance_de_novo_novel_"$MEI".TPM"$TPM".report --output "$path_Result"centromere_distance_de_novo_novel_"$MEI".TPM"$TPM".pdf"
    echo $cmd_drawing_centromere_de_novo_novel >> $path_current"drawing_"$USER$option_tag".sh"

    eval "chmod 777 "$path_current"drawing_"$USER$option_tag".sh"
    eval "source "$path_current"drawing_"$USER$option_tag".sh"

    while [ $(eval "ls "$path_Result"centromere_distance_all_"$MEI".TPM"$TPM".pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"centromere_distance_all_"$MEI".TPM"$TPM".pdf \e[0;0m has been generated"
    while [ $(eval "ls "$path_Result"centromere_distance_polymorphism_"$MEI".TPM"$TPM".pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"centromere_distance_polymorphism_"$MEI".TPM"$TPM".pdf \e[0;0m has been generated"
    while [ $(eval "ls "$path_Result"centromere_distance_novel_"$MEI".TPM"$TPM".pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"centromere_distance_novel_"$MEI".TPM"$TPM".pdf \e[0;0m has been generated"

    while [ $(eval "ls "$path_Result"centromere_distance_de_novo_polymorphism_"$MEI".TPM"$TPM".pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"centromere_distance_de_novo_polymorphism_"$MEI".TPM"$TPM".pdf \e[0;0m has been generated"
    while [ $(eval "ls "$path_Result"centromere_distance_de_novo_novel_"$MEI".TPM"$TPM".pdf 2>/dev/null|wc -l") -lt 1 ]; do     sleep 10;      done
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"centromere_distance_de_novo_novel_"$MEI".TPM"$TPM".pdf \e[0;0m has been generated"

#>>>> Check_point_15 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    elif [[ $input_BB == "15" ]]; then

    THREADS=$(echo $cores/5|bc)

	cmd_main_folder_sequences="mkdir "$path_Result"Sequences_for_alignments/ 2>/dev/null"
	eval $cmd_main_folder_sequences

	number_of_target_bed=$(ls -1 $path_output*.bed 2>/dev/null|wc -l)

	if [[ $number_of_target_bed == 1 ]]; then

	input_file=$(ls -1 $path_output*.bed )

	elif [[ $number_of_target_bed != 1 ]]; then
	eval "ls -1 "$path_output"*.bed|awk 'BEGIN{i=1} {print i\".\\t\" \$1;i+=1}'"
	eval "ls -1 "$path_output"*.bed|awk 'BEGIN{i=1} {print i\".\\t\" \$1;i+=1}'" > $path_current"choose_one_from_multiple_bed_for_sequences."$USER".temp"

	echo "Choose the number of bed file for extracing sequences within locus clusters."
	read no_bed
	input_file=$(eval "awk '\$1=="$no_bed" {print \$2}' "$path_current"choose_one_from_multiple_bed_for_sequences."$USER".temp")
	fi

	cmd_folder_sequences="mkdir "$path_Result"Sequences_for_alignments/"$(basename $input_file)"_sequences/ 2>/dev/null"
	eval $cmd_folder_sequences
	path_sequences=$path_Result"Sequences_for_alignments/"$(basename $input_file)"_sequences/"

 		for i in $(awk '{print $1"_"$2"=="$7}' $input_file);
 		do
 			echo "List of reads within "$i" will be generated.."

 			file_sequences_locus=$path_Result"Sequences_for_alignments/"$(basename $input_file)"_sequences/"$i".locus"
 			cmd_sequences_locus="grep -w "$(echo $i|awk -F"==" '{print $2}')" "$path_output$MEI"_all.insert"$option_tag"temp > "$file_sequences_locus
			eval $cmd_sequences_locus

			rm_sequences_locus_file="rm "$file_sequences_locus".list 2>/dev/null"
			eval $rm_sequences_locus_file

			if [[ $file_sequences_locus == *"plus"* ]]; then
				while read chromosome start end depth individual cluster 
				do
					cmd_plus="awk -F\"\t\" '\$1==\""$chromosome"\" && \$2==\""$start"\" && \$3==\""$end"\" && \$6~\"+\" {print \$4\"\t"$individual"\"}' "$path_current"Sample_"$individual"/"$individual"*"$option_tag"repeatcover.temp >>"$file_sequences_locus".list"
					eval $cmd_plus # do not use "&" after this commands, some lines was broken 
				done < $file_sequences_locus

			elif [[ $file_sequences_locus == *"minus"* ]]; then
				while read chromosome start end depth individual cluster 
				do
					cmd_minus="awk -F\"\t\" '\$1==\""$chromosome"\" && \$3==\""$start"\" && \$2==\""$end"\" && \$6~\"-\" {print \$4\"\t"$individual"\"}' "$path_current"Sample_"$individual"/"$individual"*"$option_tag"repeatcover.temp >>"$file_sequences_locus".list"			 
					eval $cmd_minus
				done < $file_sequences_locus
			fi

        sleep 10
          
            for job15_1 in $(jobs -p)
            do
                wait $job15_1
            done
 		done

 		list_sequences="ls -1 "$path_Result"Sequences_for_alignments/"$(basename $input_file)"_sequences/*.locus.list"
        
        THREADS=$(echo $cores|bc)
        f_number=1
 		for f in $(eval $list_sequences);
 		do
 			echo "FASTA file from "$f" are created.."
 			rm_f_file="rm "$f".fasta 2>/dev/null"
 			eval $rm_f_file
	 		while read sequence_name individual	 		
	 		do
	 			read2=$(ls $path_current"Sample_"$individual"/"*.fastq|grep -E "*"$individual"*.*fastq"|grep R2|awk -F"." '{print $1}')
	 			cmd_fasta2="grep -w  -A3 \""$sequence_name"\" "$read2".fastq|perl -e '\$i=0;while(<>){if(/^\@/&&\$i==0){s/^\@/\>/;print;}elsif(\$i==1){print;\$i=-3}\$i++;}'|awk ' {if(NR%2==0)print \$0; else if(NR%2==1) print \$1}'|sed 's/>/> R2_"$individual"_/g' >> "$f"_R2.fasta"
	 			eval $cmd_fasta2&

                read1=$(ls $path_current"Sample_"$individual"/"*.fastq|grep -E "*"$individual"*.*fastq"|grep R1|awk -F"." '{print $1}')
                cmd_fasta1="grep -w  -A3 \""$sequence_name"\" "$read1".fastq|perl -e '\$i=0;while(<>){if(/^\@/&&\$i==0){s/^\@/\>/;print;}elsif(\$i==1){print;\$i=-3}\$i++;}'|awk ' {if(NR%2==0)print \$0; else if(NR%2==1) print \$1}'|sed 's/>/> R1_"$individual"_/g' >> "$f"_R1.fasta"
                eval $cmd_fasta1&

		 		###### checking_job15_2
	            checker15_2=$(expr $f_number '%' $THREADS == 0)
	            if [ $checker15_2 = 1 ]
	            then
	                for job15_2 in $(jobs -p)
	                do
	                    wait $job15_2
	                done
	            fi

            f_number=$(echo $f_number+1|bc)
	 		done < $f

	 	done

        sleep 10
          
            for job15_3 in $(jobs -p)
            do
                wait $job15_3
            done
 
    echo -e "\e[0;0m the file named as \e[0;32m"$path_Result"Sequences_for_alignments/"$(basename $input_file)"_sequences/*.locus.list_R*.fasta \e[0;0m has been generated"

    else
        return
    fi 


# EEEEE     EEEEE EEEEE     EEEEE 
#   EEEEE EEEEE     EEEEE EEEEE   
#      EEEEE           EEEEE      
#   EEEEE EEEEE     EEEEE EEEEE   
# EEEEE     EEEEE EEEEE     EEEEE 
# EEEEE     EEEEE EEEEE     EEEEE 
#   EEEEE EEEEE     EEEEE EEEEE   
#      EEEEE           EEEEE      
#   EEEEE EEEEE     EEEEE EEEEE   
# EEEEE     EEEEE EEEEE     EEEEE  
# EEEEE     EEEEE EEEEE     EEEEE 
#   EEEEE EEEEE     EEEEE EEEreEE   
#      EEEEE           EEEEE      
#   EEEEE EEEEE     EEEEE EEEEE   
# EEEEE     EEEEE EEEEE     EEEEE 

elif [[ $Major_step == "E" || $Major_step == "e" ]]; then

    cmd_workplace_primer="mkdir "$path_current"genotyping_primers"$option_tag"/ 2>/dev/null"
    eval $cmd_workplace_primer

    number_of_target_bed=$(ls -1 $path_output*.bed|grep   2>/dev/null|wc -l)

	if [[ $number_of_target_bed == 1 ]]; then

	input_file=$(ls -1 $path_output*.bed )

	elif [[ $number_of_target_bed != 1 ]]; then
	eval "ls -1 "$path_output"*.bed 2>/dev/null|awk 'BEGIN{i=1} {print i\".\\t\" \$1;i+=1}'"
	eval "ls -1 "$path_output"*.bed 2>/dev/null|awk 'BEGIN{i=1} {print i\".\\t\" \$1;i+=1}'" > $path_current"choose_one_from_multiple_bed_for_primer."$USER".temp"

	echo "Choose the number of bed file for genotyping primer design."
	read no_bed
	input_file=$(eval "awk '\$1=="$no_bed" {print \$2}' "$path_current"choose_one_from_multiple_bed_for_primer."$USER".temp")
	fi

	genome=$path_ref_mescan"hg19_low_case.fa"
	radius=$(echo $window_size/2|bc)
	seqrange=$window_size
	output_file=$path_current"genotyping_primers"$option_tag"/"$(echo $input_file|awk -F"/" '{print $(NF)}')
    cmd_primer=$path_python3"python3 "$path_modules"BulkGenPrimer.py -i "$input_file" -g "$genome" -r "$radius" -s "$seqrange" -o "$output_file" -ot "$option_tag
    eval $cmd_primer

    while [ $(eval "ls "$output_file"*out 2>/dev/null|wc -l") -lt $(eval "cat "$input_file" 2>/dev/null|wc -l") ]; do
	    sleep 5
    done

    cmd_summary_primer="grep \"PRIMER\|PRODUCT\" "$output_file"*.out|awk -F\"out:\" '{print \$2}' > "$output_file".summary"
    eval $cmd_summary_primer

    eval "rm "$path_current"chr*for "$path_current"chr*rev 2>/dev/null"

    echo -e "\e[0;0m the file named as \e[0;32m"$output_file".summary \e[0;0m has been generated"

    echo "Step-E has been completed."



# FFFFF     FFFFF FFFFF     FFFFF 
#   FFFFF FFFFF     FFFFF FFFFF   
#      FFFFF           FFFFF      
#   FFFFF FFFFF     FFFFF FFFFF   
# FFFFF     FFFFF FFFFF     FFFFF 
# FFFFF     FFFFF FFFFF     FFFFF 
#   FFFFF FFFFF     FFFFF FFFFF   
#      FFFFF           FFFFF      
#   FFFFF FFFFF     FFFFF FFFFF   
# FFFFF     FFFFF FFFFF     FFFFF  
# FFFFF     FFFFF FFFFF     FFFFF 
#   FFFFF FFFFF     FFFFF FFFFF   
#      FFFFF           FFFFF      
#   FFFFF FFFFF     FFFFF FFFFF   
# FFFFF     FFFFF FFFFF     FFFFF 

elif [[ $Major_step == "F" || $Major_step == "f" ]]; then

    # Record history
	date=$(date)
	echo $date" "$Software$Software_ver" "$Software_sub" Step-"$Major_step" was operated. "$MEI >> $path_current"history"$option_tag"log"

	echo "1. remove intermediate files only "
    echo "2. remove \" ~stuff\" subdirectories in Result directory"
	read Clean_up_step

    if [[ $Clean_up_step == "1" ]]; then
        cmd_clean="rm "$path_current"*/*temp 2>/dev/null"

    elif [[ $Clean_up_step == "2" ]]; then
        cmd_clean="rm -R "$path_current"*stuff/ 2>/dev/null&"
    else 
        echo "You didn't choose any cleanup step"
        return
    fi

        eval $cmd_clean

else
	return

fi

# return command
echo "Keep going (Y, N)?"
read answer
if [[ $answer == "Y" || $answer == "y" ]]; then
    cmd_loop="source "$path_mescan$Software".sh reexecute "$parameters_file
    eval $cmd_loop
elif [[ $answer == "N" || $answer == "n" ]]; then
    echo "Stopped."
    return
else
    echo "You did't input both. Stopped"
    return 
fi